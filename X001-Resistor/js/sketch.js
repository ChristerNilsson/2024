// Generated by CoffeeScript 2.5.1
var bPos, band, cT, colors, drawCircle, drawResistor, drawString, fillCircle, fillRect, first, mm, multiplier, multipliers, pretty, range, secon, tolerance, tolerances, y,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

range = _.range;

tolerances = [
  1,
  2,
  5,
  10 // %
];

cT = 'brown red gold silver'.split(' ');

colors = 'SILVER GOLD BLACK BROWN RED ORANGE YELLOW GREEN BLUE VIOLET LIGHTGREY WHITE'.split(' ');

multipliers = [0.01, 0.1, 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000];

mm = "x0.01 x0.1 x1 x10 x100 x1K x10K x100K x1M x10M x100M x1G".split(' ');

band = 0;

first = 1;

secon = 2;

multiplier = 1;

tolerance = 2;

bPos = [88, 108, 120, 142];

y = 37;

fillRect = function(x, y, w, h, col) {
  fill(col);
  return rect(x, y, w, h);
};

fillCircle = function(x, y) {
  fill('WHITE');
  return circle(x, y, 4);
};

drawCircle = function(x, y, col) {
  fill(col);
  return circle(x, y, 8);
};

drawString = function(txt, x, y) {
  return text(txt, x - 1, y + 9);
};

pretty = function(x, diff) {
  var dekad, unit, units;
  units = "ohm K M G".split(' ');
  dekad = Math.floor(Math.log10(x) / 3);
  if (dekad < 0) {
    dekad = 0;
  }
  unit = " " + units[dekad];
  return [round((x - diff) / 1000 ** dekad, 2) + unit, round(x / 1000 ** dekad, 2) + unit, round((x + diff) / 1000 ** dekad, 2) + unit];
};

window.setup = function() {
  createCanvas(240, 137);
  noStroke();
  return rectMode(CENTER);
};

drawResistor = function() {
  var xm;
  push();
  fill('white');
  xm = (bPos[0] + bPos[3]) / 2;
  textAlign(CENTER, CENTER);
  drawString("Resistor CALC", xm, 5);
  rect(xm, y, 100, 2);
  circle(bPos[0], y, 26);
  rect(xm, y, 32, 15);
  circle(bPos[3], y, 26);
  fillRect(bPos[0], y, 6, 25, colors[first + 2]);
  fillRect(bPos[1], y, 6, 14, colors[secon + 2]);
  fillRect(bPos[2], y, 6, 14, colors[multiplier]);
  fillRect(bPos[3], y, 6, 25, cT[tolerance]);
  fillCircle(bPos[band], 58);
  return pop();
};

window.draw = function() {
  var col, diff, i, j, k, len, len1, maxx, minn, ref, ref1, res, value;
  background('black');
  fill('white');
  drawResistor();
  ref = range(12);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (i < 10) {
      fillRect(8, 6 + i * 13, 11, 13, colors[i + 2]);
      fillRect(22 + 5, 6 + i * 13, 11, 13, colors[i + 2]);
      col = i === 0 || i === 6 ? 'WHITE' : 'BLACK';
      fill(col);
      drawString(i, 5, i * 13 + 2);
      drawString(i, 25, i * 13 + 2);
      fill('WHITE');
    }
    col = i === 0 ? 'WHITE' : colors[i];
    drawCircle(235, i * 11 + 9, col);
    fill('WHITE');
    drawString(mm[i], 194, i * 11 + 4);
  }
  fillCircle(17, first * 13 + 5);
  fillCircle(36, secon * 13 + 5);
  fillCircle(188, multiplier * 11 + 9);
  ref1 = range(4);
  // tolerance
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    i = ref1[k];
    fillRect(62 + i * 34, 117 + 6, 34, 12, cT[i]);
    fill('BLACK');
    drawString(tolerances[i] + "%", 54 + (i * 34), 119);
  }
  fillCircle(61 + tolerance * 34, 133);
  fill('WHITE');
  res = (first * 10 + secon) * multipliers[multiplier];
  diff = res * tolerances[tolerance] / 100.00;
  [minn, value, maxx] = pretty(res, diff);
  fill('WHITE');
  drawString(`${first}${secon} x 10    = ${value}`, 48, 76, 2);
  drawString(multiplier - 2, 85 + 2, 72);
  drawString("Max: " + maxx, 48, 94 - 4);
  return drawString("Min: " + minn, 48, 106 - 2);
};

window.keyPressed = function() {
  var delta;
  if (key === 'ArrowRight') {
    band = modulo(band + 1, cT.length);
  }
  if (key === 'ArrowLeft') {
    band = modulo(band - 1, cT.length);
  }
  delta = 0;
  if (key === 'ArrowUp') {
    delta = -1;
  }
  if (key === 'ArrowDown') {
    delta = 1;
  }
  if (band === 0) {
    first = modulo(first + delta, 10);
  }
  if (band === 1) {
    secon = modulo(secon + delta, 10);
  }
  if (band === 2) {
    multiplier = modulo(multiplier + delta, multipliers.length);
  }
  if (band === 3) {
    return tolerance = modulo(tolerance + delta, tolerances.length);
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2024\X001-Resistor\coffee\sketch.coffee