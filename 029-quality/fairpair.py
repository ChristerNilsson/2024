ocrs = []
def app(a,b,c):
	ocrs.append([len(ocrs)+1, a,b,c])

# Tyresö Open 2024

app(2416,[53,24, 8,16,15,14, 2, 5],"11111rrr")
app(2366,[62,50,28, 6,14, 5, 1, 4],"1111r1rr")
app(2272,[21,19,46,54,28,18,16,11],"1011r111")
app(2413,[71,36,70,61, 8,15,14, 2],"1011111r")
app(2235,[39,17,25,22, 9, 2,23, 1],"1r11101r")
app(2093,[58,35,30, 2,10,17,34,14],"1110rr11")
app(2048,[75,41,52,14,38,29,18,15],"1110rr11")
app(2035,[51,37, 1,34, 4,21,10,30],"110101r1")
app(2141,[48,25,17,12, 5,28,11,29],"1r110101")
app(1793,[16,77,26,36, 6,20, 8,28],"0111rrr1")
app(2076,[60,61,19,15,35,16, 9, 3],"11101r10")
app(2335,[37,45,21, 9,62,40,17,20],"011011r1")
app(1923,[70,42,57,43,23,51,50,36],"r0110111")
app(2113,[64,27,36, 7, 2, 1, 4, 6],"1111rr00")
app(2213,[57,18,29,11, 1, 4,25, 7],"11110010")
app(2108,[10,40,34, 1,19,11, 3,17],"11101r0r")
app(1977,[67, 5, 9,70,31, 6,12,16],"1r011rrr")
app(1907,[68,15,47,51,22, 3, 7,37],"10111001")
app(1936,[76, 3,11,44,16,31,35,41],"11010rr1")
app(2065,[44,34,37,30,33,10,32,12],"101r1r10")
app(1818,[ 3,76,12,55,27, 8,61,50],"01011011")
app(2039,[31,54,42, 5,18,35,29,34],"11100rr1")
app(2109,[46,52,60,56,13,38, 5,24],"10r1110r")
app(1985,[74, 1,44,47,37,39,43,23],"10011r1r")
app(1944,[77, 9, 5,63,56,41,15,35],"1r0r1101")
app(2046,[47,30,10,75,70,33,38,40],"100r1r11")
app(1897,[72,14,51,45,21,58,53,48],"10010111")
app(2031,[56,33, 2,53, 3, 9,39,10],"1101r010")
app(2022,[45,73,15,33,30, 7,22, 9],"110r1rr0")
app(1871,[81,26, 6,20,29,64,31, 8],"110r0110")
app(1748,[22,49,32,50,17,19,30,55],"01110r01")
app(1896,[42,43,31,46,59,48,20,33],"0101110r")
app(1846,[65,28,72,29,20,26,63,32],"101r0r1r")
app(1880,[55,20,16, 8,63,36, 6,22],"11001100")
app(1886,[69, 6,59,42,11,22,19,25],"10110rr0")
app(2001,[59, 4,14,10,53,34,62,13],"11001010")
app(1827,[12, 8,20,73,24,77,52,18],"10010110")
app(1691,[50,62,41,52, 7,23,26,39],"L111r00r")
app(1803,[ 5,59,79,49,52,24,28,38],"00111r0r")
app(1893,[63,16,56,60,42,12,57,26],"10011010")
app(1878,[78, 7,38,74,44,25,49,19],"10011010")
app(1641,[32,13,22,35,40,57,70,66],"11000011")
app(1400,[66,32,68,13,71,54,24,45],"r010110r")
app(1768,[20,69,24,19,41,52,73,61],"01100011")
app(1728,[29,12,78,27,55,76,54,43],"0010r11r")
app(1787,[23,79, 3,32,68,49,74,63],"01001011")
app(1761,[26,55,18,24,79,61,65,62],"01001011")
app(1796,[ 9,67,69,65,61,32,66,27],"00111010")
app(1400,[54,31,82,39,74,46,41,64],"00F01101")
app(1954,[38, 2,75,31,64,60,13,21],"W010r100")
app(1733,[ 8,81,27,18,54,13,64,57],"0110r0rr")
app(1889,[79,23, 7,38,39,44,37,58],"1100010r")
app(1835,[ 1,74,65,28,36,59,27,56],"0110010r")
app(1852,[49,22,73, 3,51,43,45,72],"1010r001")
app(1480,[34,47,58,21,45,70,60,31],"0010r110")
app(1733,[28,71,40,23,25,66,67,53],"0110001r")
app(1800,[15,68,13,71,72,42,40,51],"0r0r110r")
app(1783,[ 6,63,55,69,73,27,77,52],"000110Wr")
app(1726,[36,39,35,66,32,53,71,74],"010100r1")
app(1778,[11,80,23,40,75,50,55,71],"01r01001")
app(1885,[80,11,67, 4,48,47,21,44],"10100100")
app(1828,[ 2,38,76,72,12,67,36,47],"00110100")
app(1622,[40,58,66,25,34,75,33,46],"01rr0100")
app(1794,[14,72,80,67,50,30,51,49],"0011r0r0")
app(1400,[33,82,53,48,67,68,47,75],"0F000101")
app(1848,[43,70,63,59,76,56,48,42],"r0r01100")
app(1709,[17,48,61,64,65,62,56,73],"0100100W")
app(1650,[18,57,43,77,46,65,78,79],"0r0r0011")
app(1575,[35,44,48,58,80,72,82,76],"0000rrF1")
app(1671,[13,66, 4,17,26,55,42,80],"r1000001")
app(1833,[ 4,56,77,57,43,79,59,60],"00rr01r0")
app(1624,[27,64,33,62,57,69,80,54],"01000r10")
app(1680,[82,29,54,37,58,81,44,67],"F000010L")
app(1721,[24,53,81,41,49,78,46,59],"00100100")
app(1763,[ 7,78,50,26,60,63,79,65],"010r00r0")
app(1688,[19,21,62,78,66,45,81,69],"00010010")
app(1695,[25,10,71,68,81,37,58,82],"00rr10L ")
app(1417,[41,75,45,76,82,74,68,81],"0000F001")
app(1579,[52,46,39,80,47,71,75,68],"000100r0")
app(1524,[61,60,64,79,69,82,72,70],"0000rF00")
app(1406,[30,51,74,82,77,73,76,78],"000F0000")
app(1400,[73,65,49,81,78,80,69,77],"00000000") # Frirond

def f(diff): return 1/(1+pow(10,diff/400))

# def buchholz(p):
# 	[opps, results] = ocrs[p]
# 	res = [scores(opps[r]-1) for r in range(8)]
# 	res.sort()
# 	res.reverse()
# 	res.pop() # tag bort minsta
# 	return sum(res)
#
# def performance(p):
# 	[opps, results] = ocrs[p]
# 	s = sum([elos[opps[r]] for r in range(8)]) / 8
# 	k = 400
# 	v = scores(p) / 8
# 	# print(s,v)
# 	return s + k * (v-0.5)

def score(p,r):
	[elo, opps, results] = ocrs[p]
	score = results[r]
	s = -1
	if score == 'r':   s = 0.5
	if score in '0L ': s = 0
	if score in '1WF': s = 1
	if s == -1: print('oops!',elo)
	return s
def scores(p):return sum([score(p,r) for r in range(8)])
def lista_a():

	OFFSET = 400

	totals = []
	for p in range(81):
		# if elos[p+1] not in [2416,2366,2272,2413]: continue
		# if elos[p+1] not in [2235,2093,2048]: continue
		# if elos[p+1] not in [2035,2141,1793,2076,2335,1923]: continue
		[elo, opps, results] = ocrs[p]
		total = 0
		es = 0
		ss = 0
		for r in range(8):
			opp = opps[r]
			oppelo = ocrs[opp-1][0]
			es += oppelo
			s = score(p,r)
			ss += s
			diff = elo - oppelo
			summa = elo + oppelo

			#value = f(diff)*summa*s
			#value = f(diff)*2*elos[opp]*s
			#value = f(diff)*s * elos[opp]
			value = (oppelo - OFFSET) * s

			total += value

			# print(elos[p+1],elos[opp],diff,s,round(value))
		totals.append(total)

		print(p+1,elo,round(total),scores(p)) #, performance(p)) #,buchholz(p))
		# print("")
	totals.sort()
	totals.reverse()
	print("")
	for i in range(len(totals)):
		print(i+1,totals[i])

def ass(a,b):
	if a!=b:
		print(a)
		print(b)

def neighbours(n,antal):
	result = []
	lst = []
	for i in range(1,antal+1):
		lst.append(-i)
		lst.append(i)
	for i in range(n):
		res = []
		for j in lst:
			if 0 <= i+j < n and len(res) < antal: res.append(i+j)
		res.sort()
		result.append(res)
	return result

ass(neighbours(8,4), [[1, 2, 3, 4], [0, 2, 3, 4], [0, 1, 3, 4], [1, 2, 4, 5], [2, 3, 5, 6], [3, 4, 6, 7], [3, 4, 5, 7], [3, 4, 5, 6]])
ass(neighbours(16,8), [[1, 2, 3, 4, 5, 6, 7, 8], [0, 2, 3, 4, 5, 6, 7, 8], [0, 1, 3, 4, 5, 6, 7, 8], [0, 1, 2, 4, 5, 6, 7, 8], [0, 1, 2, 3, 5, 6, 7, 8], [1, 2, 3, 4, 6, 7, 8, 9], [2, 3, 4, 5, 7, 8, 9, 10], [3, 4, 5, 6, 8, 9, 10, 11], [4, 5, 6, 7, 9, 10, 11, 12], [5, 6, 7, 8, 10, 11, 12, 13], [6, 7, 8, 9, 11, 12, 13, 14], [7, 8, 9, 10, 12, 13, 14, 15], [7, 8, 9, 10, 11, 13, 14, 15], [7, 8, 9, 10, 11, 12, 14, 15], [7, 8, 9, 10, 11, 12, 13, 15], [7, 8, 9, 10, 11, 12, 13, 14]])
ass(neighbours(12,8), [[1, 2, 3, 4, 5, 6, 7, 8], [0, 2, 3, 4, 5, 6, 7, 8], [0, 1, 3, 4, 5, 6, 7, 8], [0, 1, 2, 4, 5, 6, 7, 8], [0, 1, 2, 3, 5, 6, 7, 8], [1, 2, 3, 4, 6, 7, 8, 9], [2, 3, 4, 5, 7, 8, 9, 10], [3, 4, 5, 6, 8, 9, 10, 11], [3, 4, 5, 6, 7, 9, 10, 11], [3, 4, 5, 6, 7, 8, 10, 11], [3, 4, 5, 6, 7, 8, 9, 11], [3, 4, 5, 6, 7, 8, 9, 10]])

def lista_b(): # visar hur många av de närmaste i elo man mött, rond för rond.
	N = 8

	players = [[ocr[1],ocr[0]] for ocr in ocrs]
	players.sort(reverse=True)
	nb = neighbours(len(ocrs),N)

	stat = [0] * (N+1)
	for i in range(len(ocrs)):
		a = set([ocrs[item][0] for item in nb[i]])
		ocr = ocrs[i]
		b = set(ocr[2])
		res = list(a & b)
		print(i+1,len(res),res,a,b)
		stat[len(res)] += 1

	print()
	total = 0
	for i in range(N+1):
		print(f"{stat[i]} spelare mötte {i} av de {N} närmaste spelarna")
		total+=stat[i] * i
	print()
	print(f"I snitt mötte spelarna {round(total/len(ocrs),3)} av de {N} närmaste")

lista_b()