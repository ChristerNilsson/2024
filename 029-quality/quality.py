ocrs = []
def app(a,b):
	ocrs.append([a,b])
#

# Senior Stockholm Klass 1
# elos = [0,1825,1697,1400,1598,1561,1644,1681,1684,1583,1559,1539,1598,1535,1432]
#
# ocrs = []
# app([8,9,13,6,5,10,-2,4,14,-3,11,7,12])
# app([3,-11,7,-12,8,9,-1,6,-5,10,13,4,14])
# app([4,14,13,11,-7,12,8,9,-1,-6,-5,10])
# app([14,11,7,12,8,-9,-6,5,10,13])
# app([7,12,-8,-6,13,10,-2,14,-3,11])
# app([-12,9,13,-5,-10,-4,14,-3,11])
# app([10,-14,-3,13,12,9,6])
# app([6,-5,-10,-14,7,-12,-13,9])
# app([13,5,10,-4,14,-11])
# app([11,12,-8,-6,-13,14])
# app([-2,-14,7,12,8,-9])
# app([-6,-2,14,13,-8,9])
# app([14,11,-10,-8])
# app([-11,-7,-8])

# member = [0,
#           38,37.5,34,31.5,38.5,
#           34.5,31.5,36,36,35,
#           34.5,32.5,27,40.5,39,
#           38,35,34,33.5,32.5,
#           32,32,32,31.5,31,
#           29.5,28,36,34.5,33.5,
#           31,30,29,34,34,
#           33.5,32.5,32,30.5,30,
#           30,29.5,28.5,28,28,
#           27.5,27,26,25.5,31.5,
#           31,30.5,29.5,29,28,
#           27.5,27.5,26,25.5,25.5,
#           31.5,29.5,27.5,24.5,24.5,
#           24.5,24,23.5,21,32.5,
#           27.5,25,25.5,25,24.5,
#           24,24,18.5,23,18.5,
#           19]

# Tyres√∂ Open 2024
# elos = [0,2416,2366,2272,2413,2235,
#         2093,2048,2035,2141,1793,
#         2076,2335,1923,2113,2213,
#         2108,1977,1907,1936,2065,
#         1818,2039,2109,1985,1944,
#         2046,1897,2031,2022,1871,
#         1748,1896,1846,1880,1886,
#         2001,1827,1691,1803,1893,
#         1878,1641,1400,1768,1728,
#         1787,1761,1796,1400,1954,
#         1733,1889,1835,1852,1480,
#         1733,1800,1783,1726,1778,
#         1885,1828,1622,1794,1400,
#         1848,1709,1650,1575,1671,
#         1833,1624,1680,1721,1763,
#         1688,1695,1417,1579,1524,1406,1400]
#
# app([53,24, 8,16,15,14, 2, 5],"11111rrr")
# app([62,50,28, 6,14, 5, 1, 4],"1111r1rr")
# app([21,19,46,54,28,18,16,11],"1011r111")
# app([71,36,70,61, 8,15,14, 2],"1011111r")
# app([39,17,25,22, 9, 2,23, 1],"1r11101r")
# app([58,35,30, 2,10,17,34,14],"1110rr11")
# app([75,41,52,14,38,29,18,15],"1110rr11")
# app([51,37, 1,34, 4,21,10,30],"110101r1")
# app([48,25,17,12, 5,28,11,29],"1r110101")
# app([16,77,26,36, 6,20, 8,28],"0111rrr1")
# app([60,61,19,15,35,16, 9, 3],"11101r10")
# app([37,45,21, 9,62,40,17,20],"011011r1")
# app([70,42,57,43,23,51,50,36],"r0110111")
# app([64,27,36, 7, 2, 1, 4, 6],"1111rr00")
# app([57,18,29,11, 1, 4,25, 7],"11110010")
# app([10,40,34, 1,19,11, 3,17],"11101r0r")
# app([67, 5, 9,70,31, 6,12,16],"1r011rrr")
# app([68,15,47,51,22, 3, 7,37],"10111001")
# app([76, 3,11,44,16,31,35,41],"11010rr1")
# app([44,34,37,30,33,10,32,12],"101r1r10")
# app([ 3,76,12,55,27, 8,61,50],"01011011")
# app([31,54,42, 5,18,35,29,34],"11100rr1")
# app([46,52,60,56,13,38, 5,24],"10r1110r")
# app([74, 1,44,47,37,39,43,23],"10011r1r")
# app([77, 9, 5,63,56,41,15,35],"1r0r1101")
# app([47,30,10,75,70,33,38,40],"100r1r11")
# app([72,14,51,45,21,58,53,48],"10010111")
# app([56,33, 2,53, 3, 9,39,10],"1101r010")
# app([45,73,15,33,30, 7,22, 9],"110r1rr0")
# app([81,26, 6,20,29,64,31, 8],"110r0110")
# app([22,49,32,50,17,19,30,55],"01110r01")
# app([42,43,31,46,59,48,20,33],"0101110r")
# app([65,28,72,29,20,26,63,32],"101r0r1r")
# app([55,20,16, 8,63,36, 6,22],"11001100")
# app([69, 6,59,42,11,22,19,25],"10110rr0")
# app([59, 4,14,10,53,34,62,13],"11001010")
# app([12, 8,20,73,24,77,52,18],"10010110")
# app([50,62,41,52, 7,23,26,39],"L111r00r")
# app([ 5,59,79,49,52,24,28,38],"00111r0r")
# app([63,16,56,60,42,12,57,26],"10011010")
# app([78, 7,38,74,44,25,49,19],"10011010")
# app([32,13,22,35,40,57,70,66],"11000011")
# app([66,32,68,13,71,54,24,45],"r010110r")
# app([20,69,24,19,41,52,73,61],"01100011")
# app([29,12,78,27,55,76,54,43],"0010r11r")
# app([23,79, 3,32,68,49,74,63],"01001011")
# app([26,55,18,24,79,61,65,62],"01001011")
# app([ 9,67,69,65,61,32,66,27],"00111010")
# app([54,31,82,39,74,46,41,64],"00F01101") # 49
# app([38, 2,75,31,64,60,13,21],"W010r100")
# app([ 8,81,27,18,54,13,64,57],"0110r0rr")
# app([79,23, 7,38,39,44,37,58],"1100010r")
# app([ 1,74,65,28,36,59,27,56],"0110010r")
# app([49,22,73, 3,51,43,45,72],"1010r001")
# app([34,47,58,21,45,70,60,31],"0010r110")
# app([28,71,40,23,25,66,67,53],"0110001r")
# app([15,68,13,71,72,42,40,51],"0r0r110r")
# app([ 6,63,55,69,73,27,77,52],"000110Wr")
# app([36,39,35,66,32,53,71,74],"010100r1")
# app([11,80,23,40,75,50,55,71],"01r01001")
# app([80,11,67, 4,48,47,21,44],"10100100")
# app([ 2,38,76,72,12,67,36,47],"00110100")
# app([40,58,66,25,34,75,33,46],"01rr0100")
# app([14,72,80,67,50,30,51,49],"0011r0r0")
# app([33,82,53,48,67,68,47,75],"0F000101") # 65
# app([43,70,63,59,76,56,48,42],"r0r01100")
# app([17,48,61,64,65,62,56,73],"0100100W")
# app([18,57,43,77,46,65,78,79],"0r0r0011")
# app([35,44,48,58,80,72,82,76],"0000rrF1") #69
# app([13,66, 4,17,26,55,42,80],"r1000001")
# app([ 4,56,77,57,43,79,59,60],"00rr01r0")
# app([27,64,33,62,57,69,80,54],"01000r10")
# app([82,29,54,37,58,81,44,67],"F000010L") # 73
# app([24,53,81,41,49,78,46,59],"00100100")
# app([ 7,78,50,26,60,63,79,65],"010r00r0")
# app([19,21,62,78,66,45,81,69],"00010010")
# app([25,10,71,68,81,37,58,82],"00rr10L ") # 77
# app([41,75,45,76,82,74,68,81],"0000F001") # 78
# app([52,46,39,80,47,71,75,68],"000100r0")
# app([61,60,64,79,69,82,72,70],"0000rF00") # 80
# app([30,51,74,82,77,73,76,78],"000F0000") # 81
# app([73,65,49,81,78,80,69,77],"00000000") # Frirond

elos = [0,
        2343,2363,2156,2044,1876,
        2000,2110,2066,2046,1893,
        1914,1882,1616,2178,1660,
        1783,1955,1802,1699,1615,
        1600,1576,1862,1590,1580,
        1570,1849,1560,1550,1540]

app([16,10, 4, 8, 2, 3, 7],"1111111")
app([18,11, 9, 7, 1, 8, 4],"111r011")
app([15, 5,19,10, 7, 1,12],"1011101")
app([25,24, 1,16,14, 5, 2],"1101110")
app([29, 3, 8, 9,17, 4,11],"1101101")
app([12, 9,18,11,16,10, 8],"1010111")
app([13,23,17, 2, 3, 9, 1],"111r010")
app([20,19, 5, 1,11, 2, 6],"1110100")
app([22, 6, 2, 5,13, 7,16],"1100101")
app([28, 1,13, 3,20, 6,19],"1010101")
app([30, 2,15, 6, 8,23, 5],"1011010")
app([ 6,22,20,25,21,17, 3],"0101110")
app([ 7,29,10,27, 9,21,17],"0101011")
app([19,17,30,23, 4,15,18],"0011011")
app([ 3,28,11,24,27,14,25],"010r101")
app([ 1,30,24, 4, 6,20, 9],"0110010")
app([26,14, 7,20, 5,12,13],"1101000")
app([ 2,26, 6,22,23,24,14],"0101010")
app([14, 8, 3,21,29,22,10],"1000110")
app([ 8,21,12,17,10,16,29],"0110001")
app([23,20,26,19,12,13,28],"0011001")
app([ 9,12,29,18,26,19,30],"0010101")
app([21, 7,25,14,18,11,24],"10r010r")
app([27, 4,16,15,25,18,23],"100r10r")
app([ 4,27,23,12,24,26,15],"01r0010")
app([17,18,21,28,22,25,27],"0001001")
app([24,25,28,13,15,30,26],"0010010")
app([10,15,27,26,30,29,21],"0000110")
app([ 5,13,22,30,19,28,20],"0001000")
app([11,16,14,29,28,27,22],"0000000")
OFFSET = 750
N = 30
ROUNDS = 7

def calc(ocr):
	quality = 0
	scoreSum = 0
	for i in range(ROUNDS):
		[opp,res] = ocr
		opp = opp[i]
		res = res[i]
		score = {'0':0, 'r':0.5, '1':1, 'W':1, 'F':1, 'L':0, ' ':0}[res]
		quality += score * (elos[opp] - OFFSET)
		scoreSum += score
	return [quality,scoreSum,ocr[0],ocr[1]]

result = [0]

for ocr in ocrs:
	result.append(calc(ocr))

BHCut1 = [0]
for j in range(0,N):
	# if j==80:
	# 	z=99
	ocr = ocrs[j]
	summa = []
	totSoFar = 0
	flag = False
	for i in range(ROUNDS):
		opp = ocr[0][i]
		res = ocr[1][i]
		totSoFar += {'0': 0, 'r': 0.5, '1': 1, 'L':0, 'F':0,'W':1, ' ':0}[res]
		if res=='F':
			# print('F',i, totSoFar,0.5 * (9-i))
			summa.append(totSoFar + 0.5 * (ROUNDS+1-i))
		elif 'W' in result[opp][3]: # or 'L' in result[opp][3]:
			flag = True
		# elif 'L' in result[opp][3]: # or 'L' in result[opp][3]:
		# 	z=99
		else:
			summa.append(result[opp][1])

	if len(summa) == 0:
		BHCut1.append(0)
	else:
		summa.sort()
		if flag:
			# print(summa)
			BHCut1.append(sum(summa))
		else:
			BHCut1.append(sum(summa) - summa[0])


sonneborn = [0]
for j in range(N):
	ocr = ocrs[j]
	summa = []
	for i in range(ROUNDS):
		opp = ocr[0][i]
		res = ocr[1][i]
		score = {'0': 0, 'r': 0.5, '1': 1, 'L': 0, 'F': 1, 'W': 1, ' ': 0}[res]
		if res=='F':
			summa.append(0)
		else:
			summa.append(score * result[opp][1])

	if len(summa) == 0:
		sonneborn.append(0)
	else:
		summa.sort()
		sonneborn.append(sum(summa) - summa[0])

for i in range(1,N+1):
	a = sonneborn[i]
	# b = member[i]
	# c = f'*** {a-b}' if a!=b else ''
	print(i,elos[i],result[i][0], result[i][1], result[i][2], result[i][3], a)
