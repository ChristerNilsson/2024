// Generated by CoffeeScript 2.7.0
var BASE, Board, Button, SIZE, Square, YOFFSET, board, buttons, chess, chess2board, clickedFrom, clickedTo, draw, echo, extractLastMove, fetchAI, getProblem, images, level, mousePressed, mouseReleased, moveNumber, pgn, preload, problemBase, range, setStatus, setup, title,
  indexOf = [].indexOf;

SIZE = 40;

YOFFSET = 40;

BASE = 'Q'; // Hämtas från URL. 

board = null;

chess = new Chess();

level = 1; // fullMoves

moveNumber = 0; // chess.moveNumber verkar inte finnas, får räkna själv

range = _.range;

echo = console.log;

title = null;

pgn = null;

images = {};

clickedFrom = -1;

clickedTo = -1;

problemBase = null;

buttons = [];

chess2board = function() {
  var index, j, len, ref, results, sq;
  ref = range(64);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    index = ref[j];
    sq = chess.board()[7 - Math.floor(index / 8)][index % 8];
    results.push(board.squares[index].piece = sq ? sq.color + sq.type.toUpperCase() : '');
  }
  return results;
};

setStatus = function() {
  var s;
  textSize(18);
  fill('black');
  title = BASE === 'Qr' ? "Win in " : "Mate in ";
  text(title + level, width / 2, 25);
  s = moveNumber === 0 ? "Endbase Exerciser by Christer 2024" : extractLastMove(chess.pgn());
  return text(s, width / 2, 380);
};

getProblem = function(delta) {
  var KkBASE, color, i, indexes, j, len, letter, problem, problems, ref, ref1, results;
  KkBASE = "Kk" + BASE;
  level += delta;
  moveNumber = 0;
  if (level < 1) {
    level = 1;
  }
  if (ref = !level, indexOf.call(problemBase, ref) >= 0) {
    level -= 1;
  }
  problems = problemBase[level].split(' ');
  problem = _.sample(problems);
  indexes = (function() {
    var j, len, ref1, results;
    ref1 = range(KkBASE.length);
    results = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      i = ref1[j];
      results.push(problem.slice(2 * i, 2 * i + 2));
    }
    return results;
  })();
  chess.clear();
  ref1 = range(KkBASE.length);
  results = [];
  for (j = 0, len = ref1.length; j < len; j++) {
    i = ref1[j];
    letter = KkBASE[i];
    color = indexOf.call("KQRBNP", letter) >= 0 ? 'w' : 'b';
    chess.put({
      type: letter.toLowerCase(),
      color: color
    }, indexes[i]);
    chess2board();
    results.push(setStatus());
  }
  return results;
};

preload = function() {
  var black, j, len, letter, ref, results, white;
  if (window.location.href.includes("?base=")) {
    BASE = window.location.href.split("=")[1];
  }
  echo(BASE);
  problemBase = loadJSON(`json/${BASE}.json`);
  ref = "KQRBNP";
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    letter = ref[j];
    black = 'b' + letter;
    white = 'w' + letter;
    images[black] = loadImage(`img/${black}.png`);
    results.push(images[white] = loadImage(`img/${white}.png`));
  }
  return results;
};

setup = function() {
  createCanvas(8 * SIZE, 700);
  textAlign(CENTER, CENTER);
  board = new Board();
  title = createDiv();
  title.position(25, 12.5 * SIZE);
  pgn = createDiv('');
  pgn.position(25, 13 * SIZE);
  getProblem(0);
  buttons.push(new Button('Q', width / 2, 0, 100, 40));
  buttons.push(new Button('R', width / 2, 50, 100, 40));
  buttons.push(new Button('Qr', width / 2, 100, 100, 40));
  buttons.push(new Button('BB', width / 2, 150, 100, 40));
  buttons.push(new Button('BN', width / 2, 200, 100, 40));
  return buttons.push(new Button('NNN', width / 2, 250, 100, 40));
};

Button = class Button {
  constructor(piece1, x1, y1, w, h) {
    var color, j, len, letter, piece, ref;
    this.piece = piece1;
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.images = [];
    ref = this.piece;
    for (j = 0, len = ref.length; j < len; j++) {
      letter = ref[j];
      color = indexOf.call("KQRBNP", letter) >= 0 ? 'w' : 'b';
      piece = letter.toUpperCase();
      this.images.push(images[color + piece]);
    }
    this.XOFFSET = -20 * this.images.length;
  }

  draw() {
    var i, j, len, ref, results;
    ref = range(this.images.length);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push(image(this.images[i], this.XOFFSET + this.x + 40 * i, YOFFSET + 360 + this.y, SIZE, SIZE));
    }
    return results;
  }

  inside(x, y) {
    var ref, ref1;
    return (this.x < (ref = x - this.XOFFSET) && ref < this.x + this.w) && (this.y < (ref1 = y - YOFFSET - 360) && ref1 < this.y + this.h);
  }

  click() {
    return window.location.href = "?base=" + this.piece;
  }

};

Square = class Square {
  constructor(index1, click) {
    this.index = index1;
    this.click = click;
    this.piece = "";
    this.i = this.index % 8;
    this.j = Math.floor(this.index / 8);
    this.x = this.i * SIZE;
    this.y = (7 - this.j) * SIZE;
    this.name = "abcdefgh"[this.i] + "12345678"[this.j];
  }

  // @moving = false
  draw() {
    fill((this.i + this.j) % 2 === 0 ? 'gray' : 'yellow');
    rect(this.x, YOFFSET + this.y, SIZE, SIZE);
    if (clickedFrom !== this.index) { //and clickedTo == -1
      if (this.piece !== '') {
        return image(images[this.piece], this.x, YOFFSET + this.y, SIZE, SIZE);
      }
    }
  }

  inside(x, y) {
    var ref;
    return (this.x < x && x < this.x + SIZE) && (this.y < (ref = y - YOFFSET) && ref < this.y + SIZE);
  }

};

Board = class Board {
  constructor() {
    var i, j, len, ref;
    this.squares = [];
    ref = range(64);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      this.squares.push(new Square(i));
    }
  }

  draw() {
    var j, len, ref, results, square;
    ref = this.squares;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      square = ref[j];
      results.push(square.draw());
    }
    return results;
  }

  mousePressed() {
    var j, len, ref, results, square;
    ref = board.squares;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      square = ref[j];
      if (square.inside(mouseX, mouseY)) {
        clickedFrom = square.index;
        results.push(echo('moving', clickedFrom));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  mouseReleased() {
    var a, b, j, len, move, moves, ref, ref1, square;
    // if clickedFrom == -1 then return
    moves = (function() {
      var j, len, ref, results;
      ref = chess.moves({
        verbose: true
      });
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        move = ref[j];
        results.push(move.from + move.to);
      }
      return results;
    })();
    if (moves.length === 0) {
      getProblem(0);
      return;
    }
    ref = this.squares;
    for (j = 0, len = ref.length; j < len; j++) {
      square = ref[j];
      if (square.inside(mouseX, mouseY)) {
        clickedTo = square.index;
        a = this.squares[clickedFrom].name;
        b = square.name;
      }
    }
    if (ref1 = a + b, indexOf.call(moves, ref1) >= 0) {
      chess.move({
        from: a,
        to: b
      });
      moveNumber += 1;
      fetchAI();
    }
    return clickedFrom = -1;
  }

};

draw = function() {
  var button, j, len, square;
  background('green');
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.draw();
  }
  board.draw();
  setStatus();
  if (clickedFrom !== -1) {
    square = board.squares[clickedFrom];
    //for square in board.squares
    // echo board.squares[clickedFrom]
    echo(square.piece);
    return image(images[square.piece], mouseX - SIZE / 2, mouseY - SIZE / 2, SIZE, SIZE);
  }
};

//else
//    if @piece != ''  then image images[@piece],@x,YOFFSET+@y,SIZE,SIZE
mousePressed = function() {
  var button, j, len;
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      button.click();
      return;
    }
  }
  return board.mousePressed();
};

mouseReleased = function() {
  return board.mouseReleased();
};

extractLastMove = function(s) {
  s = s.split("\n").slice(-2).join(' ');
  return s.split(' ').slice(-3).join(' ');
};

fetchAI = function() {
  return fetch('http://tablebase.lichess.ovh/standard?fen=' + chess.fen()).then((response) => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();
  }).then((data) => {
    echo(data);
    if (data.category === "draw") {
      return getProblem(-1);
    }
    if (data.moves.length === 0) {
      if (level < moveNumber) {
        return getProblem(-1);
      } else {
        return getProblem(+1);
      }
    }
    chess.move(data.moves[0].san);
    chess2board();
    return setStatus();
  }).catch((error) => {
    return echo('Fetch error:', error);
  });
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2024\005-KRK-minimax\coffee\sketch.coffee