// Generated by CoffeeScript 2.7.0
var cols, countNeighbors, grid, make2DArray, resolution, rows,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

make2DArray = function(cols, rows) {
  var i, j, k, ref, results;
  results = [];
  for (j = k = 0, ref = cols; (0 <= ref ? k < ref : k > ref); j = 0 <= ref ? ++k : --k) {
    results.push((function() {
      var l, ref1, results1;
      results1 = [];
      for (i = l = 0, ref1 = rows; (0 <= ref1 ? l < ref1 : l > ref1); i = 0 <= ref1 ? ++l : --l) {
        results1.push(floor(random(2)));
      }
      return results1;
    })());
  }
  return results;
};

grid = [[]];

cols = 0;

rows = 0;

resolution = 5;

window.setup = function() {
  createCanvas(windowWidth - 5, windowHeight - 5);
  cols = Math.floor(width / resolution);
  rows = Math.floor(height / resolution);
  return grid = make2DArray(cols, rows);
};

window.draw = function() {
  var i, j, k, l, m, n, neighbors, next, ref, ref1, ref2, ref3, state, x, y;
  background(0);
  for (i = k = 0, ref = cols; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
    for (j = l = 0, ref1 = rows; (0 <= ref1 ? l < ref1 : l > ref1); j = 0 <= ref1 ? ++l : --l) {
      x = i * resolution;
      y = j * resolution;
      if (grid[i][j] === 1) {
        rect(x, y, resolution - 1, resolution - 1);
      }
    }
  }
  next = make2DArray(cols, rows);
  for (i = m = 0, ref2 = cols; (0 <= ref2 ? m < ref2 : m > ref2); i = 0 <= ref2 ? ++m : --m) {
    for (j = n = 0, ref3 = rows; (0 <= ref3 ? n < ref3 : n > ref3); j = 0 <= ref3 ? ++n : --n) {
      state = grid[i][j];
      neighbors = countNeighbors(grid, i, j);
      next[i][j] = state;
      if (state === 0 && neighbors === 3) {
        next[i][j] = 1;
      }
      if (state === 1 && (neighbors < 2 || neighbors > 3)) {
        next[i][j] = 0;
      }
    }
  }
  return grid = next;
};

countNeighbors = function(grid, x, y) {
  var col, i, j, k, l, len, len1, ref, ref1, row, sum;
  sum = -grid[x][y];
  ref = [-1, 0, 1];
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = [-1, 0, 1];
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      col = modulo(x + i, cols);
      row = modulo(y + j, rows);
      sum += grid[col][row];
    }
  }
  return sum;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uXFwiLCJzb3VyY2VzIjpbImNvZmZlZVxcc2tldGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxJQUFBLEVBQUEsY0FBQSxFQUFBLElBQUEsRUFBQSxXQUFBLEVBQUEsVUFBQSxFQUFBLElBQUE7RUFBQTs7QUFBQSxXQUFBLEdBQWMsUUFBQSxDQUFDLElBQUQsRUFBTyxJQUFQLENBQUE7QUFBZSxNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFFO0VBQUEsS0FBOEMsK0VBQTlDOzs7QUFBQztNQUFBLEtBQXdCLG9GQUF4QjtzQkFBQSxLQUFBLENBQU0sTUFBQSxDQUFPLENBQVAsQ0FBTjtNQUFBLENBQUE7OztFQUFELENBQUE7O0FBQWpCOztBQUVkLElBQUEsR0FBTyxDQUFDLEVBQUQ7O0FBQ1AsSUFBQSxHQUFPOztBQUNQLElBQUEsR0FBTzs7QUFDUCxVQUFBLEdBQWE7O0FBRWIsTUFBTSxDQUFDLEtBQVAsR0FBZSxRQUFBLENBQUEsQ0FBQTtFQUNkLFlBQUEsQ0FBYSxXQUFBLEdBQVksQ0FBekIsRUFBNEIsWUFBQSxHQUFhLENBQXpDO0VBQ0EsSUFBQSxjQUFPLFFBQVM7RUFDaEIsSUFBQSxjQUFPLFNBQVU7U0FDakIsSUFBQSxHQUFPLFdBQUEsQ0FBWSxJQUFaLEVBQWlCLElBQWpCO0FBSk87O0FBTWYsTUFBTSxDQUFDLElBQVAsR0FBYyxRQUFBLENBQUEsQ0FBQTtBQUNkLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQTtFQUFDLFVBQUEsQ0FBVyxDQUFYO0VBQ0EsS0FBUywrRUFBVDtJQUNDLEtBQVMsb0ZBQVQ7TUFDQyxDQUFBLEdBQUksQ0FBQSxHQUFJO01BQ1IsQ0FBQSxHQUFJLENBQUEsR0FBSTtNQUNSLElBQUcsSUFBSSxDQUFDLENBQUQsQ0FBRyxDQUFDLENBQUQsQ0FBUCxLQUFjLENBQWpCO1FBQXdCLElBQUEsQ0FBSyxDQUFMLEVBQVEsQ0FBUixFQUFXLFVBQUEsR0FBYSxDQUF4QixFQUEyQixVQUFBLEdBQWEsQ0FBeEMsRUFBeEI7O0lBSEQ7RUFERDtFQU1BLElBQUEsR0FBTyxXQUFBLENBQVksSUFBWixFQUFrQixJQUFsQjtFQUVQLEtBQVMsb0ZBQVQ7SUFDQyxLQUFTLG9GQUFUO01BQ0MsS0FBQSxHQUFRLElBQUksQ0FBQyxDQUFELENBQUcsQ0FBQyxDQUFEO01BQ2YsU0FBQSxHQUFZLGNBQUEsQ0FBZSxJQUFmLEVBQXFCLENBQXJCLEVBQXdCLENBQXhCO01BRVosSUFBSSxDQUFDLENBQUQsQ0FBRyxDQUFDLENBQUQsQ0FBUCxHQUFhO01BQ2IsSUFBRyxLQUFBLEtBQVMsQ0FBVCxJQUFjLFNBQUEsS0FBYSxDQUE5QjtRQUFxQyxJQUFJLENBQUMsQ0FBRCxDQUFHLENBQUMsQ0FBRCxDQUFQLEdBQWEsRUFBbEQ7O01BQ0EsSUFBRyxLQUFBLEtBQVMsQ0FBVCxJQUFjLENBQUMsU0FBQSxHQUFZLENBQVosSUFBaUIsU0FBQSxHQUFZLENBQTlCLENBQWpCO1FBQXVELElBQUksQ0FBQyxDQUFELENBQUcsQ0FBQyxDQUFELENBQVAsR0FBYSxFQUFwRTs7SUFORDtFQUREO1NBU0EsSUFBQSxHQUFPO0FBbkJNOztBQXFCZCxjQUFBLEdBQWlCLFFBQUEsQ0FBQyxJQUFELEVBQU8sQ0FBUCxFQUFVLENBQVYsQ0FBQTtBQUNqQixNQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQTtFQUFDLEdBQUEsR0FBTSxDQUFDLElBQUksQ0FBQyxDQUFELENBQUcsQ0FBQyxDQUFEO0FBQ2Q7RUFBQSxLQUFBLHFDQUFBOztBQUNDO0lBQUEsS0FBQSx3Q0FBQTs7TUFDQyxHQUFBLFVBQU8sQ0FBQSxHQUFJLEdBQU07TUFDakIsR0FBQSxVQUFPLENBQUEsR0FBSSxHQUFNO01BQ2pCLEdBQUEsSUFBTyxJQUFJLENBQUMsR0FBRCxDQUFLLENBQUMsR0FBRDtJQUhqQjtFQUREO1NBS0E7QUFQZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJtYWtlMkRBcnJheSA9IChjb2xzLCByb3dzKSAtPiAoKGZsb29yIHJhbmRvbSAyIGZvciBpIGluIFswLi4ucm93c10pIGZvciBqIGluIFswLi4uY29sc10pXHJcblxyXG5ncmlkID0gW1tdXVxyXG5jb2xzID0gMFxyXG5yb3dzID0gMFxyXG5yZXNvbHV0aW9uID0gNVxyXG5cclxud2luZG93LnNldHVwID0gLT5cclxuXHRjcmVhdGVDYW52YXMgd2luZG93V2lkdGgtNSwgd2luZG93SGVpZ2h0LTVcclxuXHRjb2xzID0gd2lkdGggLy8gcmVzb2x1dGlvblxyXG5cdHJvd3MgPSBoZWlnaHQgLy8gcmVzb2x1dGlvblxyXG5cdGdyaWQgPSBtYWtlMkRBcnJheSBjb2xzLHJvd3NcclxuXHJcbndpbmRvdy5kcmF3ID0gLT5cclxuXHRiYWNrZ3JvdW5kIDBcclxuXHRmb3IgaSBpbiBbMC4uLmNvbHNdXHJcblx0XHRmb3IgaiBpbiBbMC4uLnJvd3NdXHJcblx0XHRcdHggPSBpICogcmVzb2x1dGlvblxyXG5cdFx0XHR5ID0gaiAqIHJlc29sdXRpb25cclxuXHRcdFx0aWYgZ3JpZFtpXVtqXSA9PSAxIHRoZW4gcmVjdCB4LCB5LCByZXNvbHV0aW9uIC0gMSwgcmVzb2x1dGlvbiAtIDFcclxuXHJcblx0bmV4dCA9IG1ha2UyREFycmF5IGNvbHMsIHJvd3NcclxuXHJcblx0Zm9yIGkgaW4gWzAuLi5jb2xzXVxyXG5cdFx0Zm9yIGogaW4gWzAuLi5yb3dzXVxyXG5cdFx0XHRzdGF0ZSA9IGdyaWRbaV1bal1cclxuXHRcdFx0bmVpZ2hib3JzID0gY291bnROZWlnaGJvcnMgZ3JpZCwgaSwgalxyXG5cclxuXHRcdFx0bmV4dFtpXVtqXSA9IHN0YXRlXHJcblx0XHRcdGlmIHN0YXRlID09IDAgJiYgbmVpZ2hib3JzID09IDMgdGhlbiBuZXh0W2ldW2pdID0gMVxyXG5cdFx0XHRpZiBzdGF0ZSA9PSAxICYmIChuZWlnaGJvcnMgPCAyIHx8IG5laWdoYm9ycyA+IDMpIHRoZW4gbmV4dFtpXVtqXSA9IDBcclxuXHJcblx0Z3JpZCA9IG5leHRcclxuXHJcbmNvdW50TmVpZ2hib3JzID0gKGdyaWQsIHgsIHkpIC0+XHJcblx0c3VtID0gLWdyaWRbeF1beV1cclxuXHRmb3IgaSBpbiBbLTEsMCwxXVxyXG5cdFx0Zm9yIGogaW4gWy0xLDAsMV1cclxuXHRcdFx0Y29sID0gKHggKyBpKSAlJSBjb2xzXHJcblx0XHRcdHJvdyA9ICh5ICsgaikgJSUgcm93c1xyXG5cdFx0XHRzdW0gKz0gZ3JpZFtjb2xdW3Jvd11cclxuXHRzdW1cclxuIl19
//# sourceURL=c:\github\2024\041-GameOfLife\coffee\sketch.coffee