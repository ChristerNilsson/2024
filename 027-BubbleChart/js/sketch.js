// Generated by CoffeeScript 2.7.0
var DISTANCE, ELO, GAP, GRID, SWISS, Tournament, X, Y, print, range, t_active, tournaments;

import {
  swiss_data
} from './swiss.js';

import {
  elo_data
} from './elo.js';

range = _.range;

print = console.log;

[ELO, SWISS, DISTANCE, GAP, X, Y, GRID] = [1, 2, 4, 8, 16, 32, 64];

t_active = 0;

tournaments = [];

Tournament = class Tournament {
  constructor(title, color, y0, data) {
    var cells, j, len, line, lines, total, x, y;
    this.title = title;
    this.color = color;
    this.y0 = y0;
    this.data = data;
    lines = this.data.split("\n");
    this.points = [];
    total = 0;
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      cells = line.split("\t");
      x = parseInt(cells[0]);
      y = parseInt(cells[1]);
      if (x === 1400 || y === 1400) {
        continue;
      }
      total += abs(x - y);
      this.points.push([x, y]);
    }
    this.average = total / this.points.length;
    this.title += " avg=" + this.average.toFixed(0);
  }

  drawX() {
    var j, len, p, ref, x;
    push();
    stroke('darkgray');
    ref = this.points;
    for (j = 0, len = ref.length; j < len; j++) {
      p = ref[j];
      x = p[0];
      line(2450 - x, 0, 2450 - x, height * 2);
    }
    return pop();
  }

  drawY() {
    var j, len, p, ref, x;
    push();
    stroke('darkgray');
    ref = this.points;
    for (j = 0, len = ref.length; j < len; j++) {
      p = ref[j];
      x = p[0];
      line(0, 2450 - x, width * 2, 2450 - x);
    }
    return pop();
  }

  drawGrid() {
    var i, j, len, ref;
    push();
    stroke('darkgray');
    ref = range(1400, 2500, 100);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      line(2450 - i, 0, 2450 - i, 1150);
      line(0, 2450 - i, 1150, 2450 - i);
    }
    return pop();
  }

  draw() {
    var i, j, len, ref, ref1, ref2, results, size, x, xm, y, ym;
    i = 0;
    if (t_active & GAP) {
      push();
      stroke('black');
      strokeWeight(sqrt(2) * this.average);
      line(0, 0, 1200, 1200);
      strokeWeight(1);
      stroke('white');
      line(0, 0, 1200, 1200);
      pop();
    }
    fill(this.color);
    stroke('black');
    text(this.title, 950, this.y0);
    ref = this.points;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      [x, y] = ref[j];
      size = 2 * sqrt(abs(x - y));
      circle(2450 - x, 2450 - y, 2 + size);
      xm = mouseX / (height / 1100);
      ym = mouseY / (height / 1100);
      if ((x - size / 2 < (ref1 = 2450 - xm) && ref1 < x + size / 2) && (y - size / 2 < (ref2 = 2450 - ym) && ref2 < y + size / 2)) {
        push();
        fill('black');
        text(`${x} vs ${y} => ${abs(x - y)}`, 950, 150 + 50 * i);
        i += 1;
        results.push(pop());
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

window.setup = function() {
  createCanvas(windowWidth - 4, windowHeight - 4);
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  textSize(32);
  tournaments.push(new Tournament("Swiss Pairing", [255, 0, 0, 128], 100, swiss_data));
  return tournaments.push(new Tournament("ELO Pairing", [0, 255, 0, 128], 50, elo_data));
};

window.draw = function() {
  var i, j, len, ref;
  background('gray');
  scale(height / 1100);
  if (t_active) {
    if (t_active & DISTANCE) {
      ref = range(-13, 13);
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        stroke('yellow');
        line(0, 0 + i * 100, 1200, 1200 + i * 100);
      }
    }
    if (t_active & X) {
      tournaments[0].drawX();
    }
    if (t_active & Y) {
      tournaments[0].drawY();
    }
    if (t_active & GRID) {
      tournaments[0].drawGrid();
    }
    if (t_active & SWISS) {
      tournaments[0].draw();
    }
    if (t_active & ELO) {
      return tournaments[1].draw();
    }
  } else {
    fill('black');
    noStroke();
    text("e = elo", width / 2, 100);
    text("s = swiss", width / 2, 200);
    text("d = distance", width / 2, 300);
    text("g = gap", width / 2, 400);
    text("x = players x", width / 2, 500);
    text("y = players y", width / 2, 600);
    return text("r = grid", width / 2, 700);
  }
};

window.mousePressed = function() {
  return t_active = 0;
};

window.keyPressed = function() {
  if (key === 'e') {
    t_active ^= ELO;
  }
  if (key === 's') {
    t_active ^= SWISS;
  }
  if (key === 'd') {
    t_active ^= DISTANCE;
  }
  if (key === 'g') {
    t_active ^= GAP;
  }
  if (key === 'x') {
    t_active ^= X;
  }
  if (key === 'y') {
    t_active ^= Y;
  }
  if (key === 'r') {
    return t_active ^= GRID;
  }
};

window.windowResized = function() {
  return resizeCanvas(windowWidth - 4, windowHeight - 4);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uXFwiLCJzb3VyY2VzIjpbImNvZmZlZVxcc2tldGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxRQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBOztBQUFBLE9BQUE7RUFBUSxVQUFSO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsUUFBUjtDQUFBLE1BQUE7O0FBRUEsS0FBQSxHQUFRLENBQUMsQ0FBQzs7QUFDVixLQUFBLEdBQVEsT0FBTyxDQUFDOztBQUVoQixDQUFDLEdBQUQsRUFBSyxLQUFMLEVBQVcsUUFBWCxFQUFvQixHQUFwQixFQUF3QixDQUF4QixFQUEwQixDQUExQixFQUE0QixJQUE1QixDQUFBLEdBQW9DLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLEVBQVQsRUFBWSxFQUFaLEVBQWUsRUFBZjs7QUFFcEMsUUFBQSxHQUFXOztBQUVYLFdBQUEsR0FBYzs7QUFFUixhQUFOLE1BQUEsV0FBQTtFQUNDLFdBQWMsTUFBQSxPQUFBLElBQUEsTUFBQSxDQUFBO0FBQ2YsUUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUE7SUFEZ0IsSUFBQyxDQUFBO0lBQU8sSUFBQyxDQUFBO0lBQU8sSUFBQyxDQUFBO0lBQUksSUFBQyxDQUFBO0lBQ3BDLEtBQUEsR0FBUSxJQUFDLENBQUEsSUFBSSxDQUFDLEtBQU4sQ0FBWSxJQUFaO0lBQ1IsSUFBQyxDQUFBLE1BQUQsR0FBVTtJQUNWLEtBQUEsR0FBUTtJQUNSLEtBQUEsdUNBQUE7O01BQ0MsS0FBQSxHQUFRLElBQUksQ0FBQyxLQUFMLENBQVcsSUFBWDtNQUNSLENBQUEs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O0FBUG1COztBQVNwQixNQUFNLENBQUMsYUFBUCxHQUF1QixRQUFBLENBQUEsQ0FBQTtTQUFHLFlBQUEsQ0FBYSxXQUFBLEdBQVksQ0FBekIsRUFBNEIsWUFBQSxHQUFhLENBQXpDO0FBQUgiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3N3aXNzX2RhdGF9IGZyb20gJy4vc3dpc3MuanMnXHJcbmltcG9ydCB7ZWxvX2RhdGF9IGZyb20gJy4vZWxvLmpzJ1xyXG5cclxucmFuZ2UgPSBfLnJhbmdlXHJcbnByaW50ID0gY29uc29sZS5sb2dcclxuXHJcbltFTE8sU1dJU1MsRElTVEFOQ0UsR0FQLFgsWSxHUklEXSA9IFsxLDIsNCw4LDE2LDMyLDY0XVxyXG5cclxudF9hY3RpdmUgPSAwXHJcblxyXG50b3VybmFtZW50cyA9IFtdXHJcblxyXG5jbGFzcyBUb3VybmFtZW50XHJcblx0Y29uc3RydWN0b3IgOiAoQHRpdGxlLCBAY29sb3IsIEB5MCwgQGRhdGEpIC0+XHJcblx0XHRsaW5lcyA9IEBkYXRhLnNwbGl0IFwiXFxuXCJcdFxyXG5cdFx0QHBvaW50cyA9IFtdXHJcblx0XHR0b3RhbCA9IDBcclxuXHRcdGZvciBsaW5lIGluIGxpbmVzXHJcblx0XHRcdGNlbGxzID0gbGluZS5zcGxpdCBcIlxcdFwiXHJcblx0XHRcdHggPSBwYXJzZUludCBjZWxsc1swXVxyXG5cdFx0XHR5ID0gcGFyc2VJbnQgY2VsbHNbMV1cclxuXHRcdFx0aWYgeD09MTQwMCBvciB5PT0xNDAwIHRoZW4gY29udGludWVcclxuXHRcdFx0dG90YWwgKz0gYWJzIHgteVxyXG5cdFx0XHRAcG9pbnRzLnB1c2ggW3gseV1cclxuXHRcdEBhdmVyYWdlID0gdG90YWwgLyBAcG9pbnRzLmxlbmd0aFxyXG5cdFx0QHRpdGxlICs9IFwiIGF2Zz1cIiArIEBhdmVyYWdlLnRvRml4ZWQgMFxyXG5cclxuXHRkcmF3WCA6IC0+XHJcblx0XHRwdXNoKClcclxuXHRcdHN0cm9rZSAnZGFya2dyYXknXHJcblx0XHRmb3IgcCBpbiBAcG9pbnRzXHJcblx0XHRcdHggPSBwWzBdXHJcblx0XHRcdGxpbmUgMjQ1MC14LCAwLCAyNDUwLXgsIGhlaWdodCAqIDJcclxuXHRcdHBvcCgpXHJcblxyXG5cdGRyYXdZIDogLT5cclxuXHRcdHB1c2goKVxyXG5cdFx0c3Ryb2tlICdkYXJrZ3JheSdcclxuXHRcdGZvciBwIGluIEBwb2ludHNcclxuXHRcdFx0eCA9IHBbMF1cclxuXHRcdFx0bGluZSAwLCAyNDUwLXgsIHdpZHRoKjIsIDI0NTAteFxyXG5cdFx0cG9wKClcclxuXHJcblx0ZHJhd0dyaWQgOiAtPlxyXG5cdFx0cHVzaCgpXHJcblx0XHRzdHJva2UgJ2RhcmtncmF5J1xyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgMTQwMCwyNTAwLDEwMFxyXG5cdFx0XHRsaW5lIDI0NTAtaSwgICAgIDAsIDI0NTAtaSwgMTE1MFxyXG5cdFx0XHRsaW5lICAgICAgMCwgMjQ1MC1pLCAxMTUwLCAgIDI0NTAtaVxyXG5cdFx0cG9wKClcclxuXHJcblx0ZHJhdyA6ICAtPlxyXG5cdFx0aSA9IDBcclxuXHRcdGlmIHRfYWN0aXZlICYgR0FQXHJcblx0XHRcdHB1c2goKVxyXG5cdFx0XHRzdHJva2UgJ2JsYWNrJ1xyXG5cdFx0XHRzdHJva2VXZWlnaHQgc3FydCgyKSAqIEBhdmVyYWdlXHJcblx0XHRcdGxpbmUgMCwwLDEyMDAsMTIwMFxyXG5cdFx0XHRzdHJva2VXZWlnaHQgMVxyXG5cdFx0XHRzdHJva2UgJ3doaXRlJ1xyXG5cdFx0XHRsaW5lIDAsMCwxMjAwLDEyMDBcclxuXHRcdFx0cG9wKClcclxuXHJcblx0XHRmaWxsIEBjb2xvclxyXG5cdFx0c3Ryb2tlICdibGFjaydcclxuXHRcdHRleHQgQHRpdGxlLCA5NTAsIEB5MFxyXG5cdFx0Zm9yIFt4LHldIGluIEBwb2ludHNcclxuXHRcdFx0c2l6ZSA9IDIgKiBzcXJ0IGFicyB4LXlcclxuXHRcdFx0Y2lyY2xlIDI0NTAteCwgMjQ1MC15LCAyICsgc2l6ZVxyXG5cdFx0XHR4bSA9IG1vdXNlWCAvIChoZWlnaHQvMTEwMClcclxuXHRcdFx0eW0gPSBtb3VzZVkgLyAoaGVpZ2h0LzExMDApXHJcblx0XHRcdGlmIHgtc2l6ZS8yIDwgMjQ1MC14bSA8IHgrc2l6ZS8yIGFuZCB5LXNpemUvMiA8IDI0NTAteW0gPCB5K3NpemUvMiBcclxuXHRcdFx0XHRwdXNoKClcclxuXHRcdFx0XHRmaWxsICdibGFjaydcclxuXHRcdFx0XHR0ZXh0IFwiI3t4fSB2cyAje3l9ID0+ICN7YWJzIHgteX1cIiwgOTUwLCAxNTAgKyA1MCppXHJcblx0XHRcdFx0aSArPSAxXHJcblx0XHRcdFx0cG9wKClcclxuXHJcbndpbmRvdy5zZXR1cCA9IC0+IFxyXG5cdGNyZWF0ZUNhbnZhcyB3aW5kb3dXaWR0aC00LHdpbmRvd0hlaWdodC00XHJcblx0cmVjdE1vZGUgQ0VOVEVSXHJcblx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHR0ZXh0U2l6ZSAzMlxyXG5cdHRvdXJuYW1lbnRzLnB1c2ggbmV3IFRvdXJuYW1lbnQgXCJTd2lzcyBQYWlyaW5nXCIsWzI1NSwwLDAsMTI4XSwgMTAwLCBzd2lzc19kYXRhXHJcblx0dG91cm5hbWVudHMucHVzaCBuZXcgVG91cm5hbWVudCBcIkVMTyBQYWlyaW5nXCIsICBbMCwyNTUsMCwxMjhdLCAgNTAsIGVsb19kYXRhXHJcblxyXG53aW5kb3cuZHJhdyA9IC0+XHJcblx0YmFja2dyb3VuZCAnZ3JheSdcclxuXHRzY2FsZSBoZWlnaHQvMTEwMFxyXG5cclxuXHRpZiB0X2FjdGl2ZSBcclxuXHJcblx0XHRpZiB0X2FjdGl2ZSAmIERJU1RBTkNFXHJcblx0XHRcdGZvciBpIGluIHJhbmdlIC0xMywxM1xyXG5cdFx0XHRcdHN0cm9rZSAneWVsbG93J1xyXG5cdFx0XHRcdGxpbmUgMCwwK2kqMTAwLDEyMDAsMTIwMCtpKjEwMFxyXG5cdFx0aWYgdF9hY3RpdmUgJiBYICAgICAgIHRoZW4gdG91cm5hbWVudHNbMF0uZHJhd1goKVxyXG5cdFx0aWYgdF9hY3RpdmUgJiBZICAgICAgIHRoZW4gdG91cm5hbWVudHNbMF0uZHJhd1koKVxyXG5cdFx0aWYgdF9hY3RpdmUgJiBHUklEICAgIHRoZW4gdG91cm5hbWVudHNbMF0uZHJhd0dyaWQoKVxyXG5cdFx0aWYgdF9hY3RpdmUgJiBTV0lTUyAgIHRoZW4gdG91cm5hbWVudHNbMF0uZHJhdygpXHJcblx0XHRpZiB0X2FjdGl2ZSAmIEVMTyAgICAgdGhlbiB0b3VybmFtZW50c1sxXS5kcmF3KClcclxuXHRlbHNlXHJcblx0XHRmaWxsICdibGFjaydcclxuXHRcdG5vU3Ryb2tlKClcclxuXHRcdHRleHQgXCJlID0gZWxvXCIsICAgICAgIHdpZHRoLzIsMTAwXHJcblx0XHR0ZXh0IFwicyA9IHN3aXNzXCIsICAgICB3aWR0aC8yLDIwMFxyXG5cdFx0dGV4dCBcImQgPSBkaXN0YW5jZVwiLCAgd2lkdGgvMiwzMDBcclxuXHRcdHRleHQgXCJnID0gZ2FwXCIsICAgICAgIHdpZHRoLzIsNDAwXHJcblx0XHR0ZXh0IFwieCA9IHBsYXllcnMgeFwiLCB3aWR0aC8yLDUwMFxyXG5cdFx0dGV4dCBcInkgPSBwbGF5ZXJzIHlcIiwgd2lkdGgvMiw2MDBcclxuXHRcdHRleHQgXCJyID0gZ3JpZFwiLCAgICAgIHdpZHRoLzIsNzAwXHJcblxyXG53aW5kb3cubW91c2VQcmVzc2VkID0gLT4gdF9hY3RpdmUgPSAwXHJcblxyXG53aW5kb3cua2V5UHJlc3NlZCA9IC0+IFxyXG5cdGlmIGtleSA9PSAnZScgdGhlbiB0X2FjdGl2ZSBePSBFTE9cclxuXHRpZiBrZXkgPT0gJ3MnIHRoZW4gdF9hY3RpdmUgXj0gU1dJU1NcclxuXHRpZiBrZXkgPT0gJ2QnIHRoZW4gdF9hY3RpdmUgXj0gRElTVEFOQ0VcclxuXHRpZiBrZXkgPT0gJ2cnIHRoZW4gdF9hY3RpdmUgXj0gR0FQXHJcblx0aWYga2V5ID09ICd4JyB0aGVuIHRfYWN0aXZlIF49IFhcclxuXHRpZiBrZXkgPT0gJ3knIHRoZW4gdF9hY3RpdmUgXj0gWVxyXG5cdGlmIGtleSA9PSAncicgdGhlbiB0X2FjdGl2ZSBePSBHUklEXHJcblxyXG53aW5kb3cud2luZG93UmVzaXplZCA9IC0+IHJlc2l6ZUNhbnZhcyB3aW5kb3dXaWR0aC00LCB3aW5kb3dIZWlnaHQtNFxyXG4iXX0=
//# sourceURL=c:\github\2024\027-BubbleChart\coffee\sketch.coffee