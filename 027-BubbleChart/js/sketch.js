// Generated by CoffeeScript 2.7.0
var DISTANCE, ELO, GAP, GRID, SWISS, Tournament, X, Y, print, range, t_active, tournaments;

import {
  swiss_data
} from './swiss.js';

import {
  elo_data
} from './elo.js';

range = _.range;

print = console.log;

[ELO, SWISS, DISTANCE, GAP, X, Y, GRID] = [1, 2, 4, 8, 16, 32, 64];

t_active = 0;

tournaments = [];

Tournament = class Tournament {
  constructor(title, color, y0, data) {
    var cells, j, len, line, lines, total, x, y;
    this.title = title;
    this.color = color;
    this.y0 = y0;
    this.data = data;
    lines = this.data.split("\n");
    this.points = [];
    total = 0;
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      cells = line.split("\t");
      x = parseInt(cells[0]);
      y = parseInt(cells[1]);
      if (x === 1400 || y === 1400) {
        continue;
      }
      total += abs(x - y);
      this.points.push([x, y]);
    }
    this.average = total / this.points.length;
    this.title += " avg=" + this.average.toFixed(0);
  }

  drawX() {
    var j, len, p, ref, x;
    push();
    stroke('darkgray');
    ref = this.points;
    for (j = 0, len = ref.length; j < len; j++) {
      p = ref[j];
      x = p[0];
      line(x - 1350, 50, x - 1350, 1050);
    }
    return pop();
  }

  drawY() {
    var j, len, p, ref, x;
    push();
    stroke('darkgray');
    ref = this.points;
    for (j = 0, len = ref.length; j < len; j++) {
      p = ref[j];
      x = p[0];
      line(50, 2450 - x, 1050, 2450 - x);
    }
    return pop();
  }

  drawGrid() {
    var i, j, len, ref;
    push();
    fill('black');
    stroke('black');
    ref = range(1400, 2500, 100);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      text(Math.floor(i / 100), i - 1350, 1080);
      text(38 - Math.floor(i / 100), 20, i - 1350);
      line(2450 - i, 50, 2450 - i, 1050);
      line(50, 2450 - i, 1050, 2450 - i);
    }
    return pop();
  }

  drawGap() {
    var d;
    if (t_active & GAP) {
      if (t_active & ELO) {
        d = 73;
      }
      if (t_active & SWISS) {
        d = 155;
      }
      push();
      stroke('black');
      strokeWeight(sqrt(2) * this.average);
      line(1100 - d, d, d, 1100 - d);
      strokeWeight(1);
      fill('black');
      rect(50, 1050, 50 + this.average, 1050 - this.average);
      rect(1050, 50, 1050 - this.average, 50 + this.average);
      return pop();
    }
  }

  drawDistance() {
    var i, j, len, ref, results, x0, y1;
    stroke('yellow');
    ref = range(10);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      x0 = 50 + i * 100;
      y1 = i * 100 + 50;
      line(x0, 1050, 1050, y1);
      results.push(line(x0, 50, 50, y1));
    }
    return results;
  }

  draw() {
    var i, j, len, ref, ref1, ref2, results, size, x, xm, y, ym;
    i = 0;
    fill(this.color);
    stroke('black');
    text(this.title, 950 + 350, this.y0);
    ref = this.points;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      [x, y] = ref[j];
      size = 2 * sqrt(abs(x - y));
      circle(x - 1350, 2450 - y, 2 + size);
      xm = mouseX / (height / 1100);
      ym = mouseY / (height / 1100);
      if ((x - size / 2 < (ref1 = 1350 + xm) && ref1 < x + size / 2) && (y - size / 2 < (ref2 = 2450 - ym) && ref2 < y + size / 2)) {
        push();
        fill('black');
        text(`${x} vs ${y} => ${abs(x - y)}`, 950 + 350, 50 + this.y0 + 50 * i);
        i += 1;
        results.push(pop());
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

window.setup = function() {
  createCanvas(windowWidth - 4, windowHeight - 4);
  rectMode(CORNERS);
  strokeCap(SQUARE);
  textAlign(CENTER, CENTER);
  textSize(32);
  tournaments.push(new Tournament("Swiss Pairing", [255, 0, 0, 128], 50, swiss_data));
  return tournaments.push(new Tournament("ELO Pairing", [0, 255, 0, 128], 550, elo_data));
};

window.draw = function() {
  var i, j, len, ref, results;
  background('gray');
  scale(height / 1100);
  if (t_active) {
    if (t_active & GAP) {
      if (t_active & SWISS) {
        tournaments[0].drawGap();
      }
      if (t_active & ELO) {
        tournaments[1].drawGap();
      }
    }
    if (t_active & X) {
      tournaments[0].drawX();
    }
    if (t_active & Y) {
      tournaments[0].drawY();
    }
    if (t_active & GRID) {
      tournaments[0].drawGrid();
    }
    if (t_active & DISTANCE) {
      tournaments[0].drawDistance();
    }
    if (t_active & SWISS) {
      tournaments[0].draw();
    }
    if (t_active & ELO) {
      tournaments[1].draw();
    }
  } else {
    fill('black');
    noStroke();
    text("e = elo", width / 2, 100);
    text("s = swiss", width / 2, 200);
    text("d = distance", width / 2, 300);
    text("g = gap", width / 2, 400);
    text("x = players x", width / 2, 500);
    text("y = players y", width / 2, 600);
    text("r = grid", width / 2, 700);
  }
  noStroke();
  ref = range(7);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    fill(t_active & 2 ** i ? 'white' : 'black');
    results.push(text('esdgxyr'[i], 1300 + i * 20, 1080));
  }
  return results;
};

window.mousePressed = function() {
  return t_active = 0;
};

window.keyPressed = function() {
  if (key === ' ') {
    t_active = 0;
  }
  if (key === 'e') {
    t_active ^= ELO;
  }
  if (key === 's') {
    t_active ^= SWISS;
  }
  if (key === 'd') {
    t_active ^= DISTANCE;
  }
  if (key === 'g') {
    t_active ^= GAP;
  }
  if (key === 'x') {
    t_active ^= X;
  }
  if (key === 'y') {
    t_active ^= Y;
  }
  if (key === 'r') {
    return t_active ^= GRID;
  }
};

window.windowResized = function() {
  return resizeCanvas(windowWidth - 4, windowHeight - 4);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2024\027-BubbleChart\coffee\sketch.coffee