// Generated by CoffeeScript 2.7.0
var DISTANCE, ELO, GAP, GRID, SWISS, Tournament, X, Y, messages, print, range, state, states, t_active, tournaments;

import {
  swiss_data
} from './swiss.js';

import {
  elo_data
} from './elo.js';

range = _.range;

print = console.log;

[ELO, SWISS, DISTANCE, GAP, X, Y, GRID] = [1, 2, 4, 8, 16, 32, 64];

t_active = 0;

tournaments = [];

states = [0, GRID, GRID + X, GRID + DISTANCE, GRID + SWISS, GRID + SWISS + DISTANCE + GAP, GRID + X + ELO, GRID + X + DISTANCE + ELO + GAP, GRID + X + DISTANCE + SWISS + ELO];

messages = [];

messages.push("|");

messages.push("1. Each axis contains elo rating for one player|between 1400 and 2400 elos. Press Space");

messages.push("2. There are 78 players, these are their elos.|Notice the Normal Distribution, more people in the middle.");

messages.push("3. The main diagonal represents a gap of zero elos.|The distance step is 100 elos.");

messages.push("4. Swiss Pairing with eight rounds. Tyres√∂ Open 2024|Hover the mouse. Where is the largest/smallest gap?");

messages.push("5. The Gap contains half of the games|");

messages.push("6. ELO Pairing with eight rounds.|");

messages.push("7. Most Elo games have a low Gap.|The top seven and bottom seven players are all meeting each other.");

messages.push("8. You seldom meet your Elo neighbours using Swiss|Press one of the letters below or Space!");

state = 0;

Tournament = class Tournament {
  constructor(title, color, y0, data) {
    var cells, j, len, line, lines, total, x, y;
    this.title = title;
    this.color = color;
    this.y0 = y0;
    this.data = data;
    lines = this.data.split("\n");
    this.points = [];
    total = 0;
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      cells = line.split("\t");
      x = parseInt(cells[0]);
      y = parseInt(cells[1]);
      if (x === 1400 || y === 1400) {
        continue;
      }
      total += abs(x - y);
      this.points.push([x, y]);
    }
    this.average = total / this.points.length;
    this.title += ` (average elo gap = ${this.average.toFixed(0)})`;
  }

  drawX() {
    var j, len, p, ref, x;
    push();
    stroke('darkgray');
    ref = this.points;
    for (j = 0, len = ref.length; j < len; j++) {
      p = ref[j];
      x = p[0];
      line(x - 1350, 50, x - 1350, 1050);
    }
    return pop();
  }

  drawY() {
    var j, len, p, ref, x;
    push();
    stroke('darkgray');
    ref = this.points;
    for (j = 0, len = ref.length; j < len; j++) {
      p = ref[j];
      x = p[0];
      line(50, 2450 - x, 1050, 2450 - x);
    }
    return pop();
  }

  drawGrid() {
    var i, j, len, ref;
    push();
    fill('black');
    stroke('black');
    textAlign(CENTER);
    ref = range(1400, 2500, 100);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      text(Math.floor(i / 100), i - 1350, 1080);
      text(38 - Math.floor(i / 100), 20, i - 1350);
      line(2450 - i, 50, 2450 - i, 1050);
      line(50, 2450 - i, 1050, 2450 - i);
    }
    return pop();
  }

  drawGap() {
    var d;
    if (t_active & GAP) {
      if (t_active & ELO) {
        d = 73;
      }
      if (t_active & SWISS) {
        d = 155;
      }
      push();
      stroke('black');
      strokeWeight(sqrt(2) * this.average);
      line(1100 - d, d, d, 1100 - d);
      strokeWeight(1);
      fill('black');
      rect(50, 1050, 50 + this.average, 1050 - this.average);
      rect(1050, 50, 1050 - this.average, 50 + this.average);
      return pop();
    }
  }

  drawDistance() {
    var i, j, len, ref, results, x0, y1;
    stroke('yellow');
    ref = range(10);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      x0 = 50 + i * 100;
      y1 = i * 100 + 50;
      line(x0, 1050, 1050, y1);
      results.push(line(x0, 50, 50, y1));
    }
    return results;
  }

  draw() {
    var i, j, len, ref, ref1, ref2, results, size, x, xm, y, ym;
    i = 0;
    fill(this.color);
    stroke('black');
    textAlign(LEFT);
    text(this.title, 950 + 150, this.y0);
    ref = this.points;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      [x, y] = ref[j];
      size = 2 * sqrt(abs(x - y));
      circle(x - 1350, 2450 - y, 2 + size);
      xm = mouseX / (height / 1100);
      ym = mouseY / (height / 1100);
      if ((x - size / 2 < (ref1 = 1350 + xm) && ref1 < x + size / 2) && (y - size / 2 < (ref2 = 2450 - ym) && ref2 < y + size / 2)) {
        push();
        fill('black');
        text(`${x} vs ${y} => ${abs(x - y)}`, 950 + 150, 50 + this.y0 + 50 * i);
        i += 1;
        results.push(pop());
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

window.setup = function() {
  createCanvas(windowWidth - 4, windowHeight - 4);
  rectMode(CORNERS);
  strokeCap(SQUARE);
  textAlign(CENTER, CENTER);
  textSize(32);
  tournaments.push(new Tournament("Swiss Pairing", [255, 0, 0, 128], 50, swiss_data));
  return tournaments.push(new Tournament("ELO Pairing", [0, 255, 0, 128], 550, elo_data));
};

window.draw = function() {
  var arr, i, j, len, ref;
  background('gray');
  scale(height / 1100);
  if (t_active) {
    if (t_active & GAP) {
      if (t_active & SWISS) {
        tournaments[0].drawGap();
      }
      if (t_active & ELO) {
        tournaments[1].drawGap();
      }
    }
    if (t_active & X) {
      tournaments[0].drawX();
    }
    if (t_active & Y) {
      tournaments[0].drawY();
    }
    if (t_active & GRID) {
      tournaments[0].drawGrid();
    }
    if (t_active & DISTANCE) {
      tournaments[0].drawDistance();
    }
    if (t_active & SWISS) {
      tournaments[0].draw();
    }
    if (t_active & ELO) {
      tournaments[1].draw();
    }
  } else {
    fill('black');
    noStroke();
    text("e = elo", width / 2, 100);
    text("s = swiss", width / 2, 200);
    text("d = distance", width / 2, 300);
    text("g = gap", width / 2, 400);
    text("x = players x", width / 2, 500);
    text("y = players y", width / 2, 600);
    text("r = grid", width / 2, 700);
    text("Space = guided tour", width / 2, 800);
  }
  noStroke();
  ref = range(7);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    fill(t_active & 2 ** i ? 'white' : 'black');
    text('esdgxyr'[i], 1300 + i * 20, 1080);
  }
  push();
  textAlign(LEFT);
  arr = messages[state].split('|');
  text(arr[0], 1100, 800);
  text(arr[1], 1100, 900);
  return pop();
};

window.mousePressed = function() {
  return t_active = 0;
};

window.keyPressed = function() {
  if (key === ' ') {
    state = (state + 1) % states.length;
    t_active = states[state];
  }
  if (key === 'e') {
    t_active ^= ELO;
  }
  if (key === 's') {
    t_active ^= SWISS;
  }
  if (key === 'd') {
    t_active ^= DISTANCE;
  }
  if (key === 'g') {
    t_active ^= GAP;
  }
  if (key === 'x') {
    t_active ^= X;
  }
  if (key === 'y') {
    t_active ^= Y;
  }
  if (key === 'r') {
    return t_active ^= GRID;
  }
};

window.windowResized = function() {
  return resizeCanvas(windowWidth - 4, windowHeight - 4);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uXFwiLCJzb3VyY2VzIjpbImNvZmZlZVxcc2tldGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxRQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBOztBQUFBLE9BQUE7RUFBUSxVQUFSO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsUUFBUjtDQUFBLE1BQUE7O0FBRUEsS0FBQSxHQUFRLENBQUMsQ0FBQzs7QUFDVixLQUFBLEdBQVEsT0FBTyxDQUFDOztBQUVoQixDQUFDLEdBQUQsRUFBSyxLQUFMLEVBQVcsUUFBWCxFQUFvQixHQUFwQixFQUF3QixDQUF4QixFQUEwQixDQUExQixFQUE0QixJQUE1QixDQUFBLEdBQW9DLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLEVBQVQsRUFBWSxFQUFaLEVBQWUsRUFBZjs7QUFFcEMsUUFBQSxHQUFXOztBQUVYLFdBQUEsR0FBYzs7QUFFZCxNQUFBLEdBQVMsQ0FBQyxDQUFELEVBQUksSUFBSixFQUFVLElBQUEsR0FBSyxDQUFmLEVBQWtCLElBQUEsR0FBSyxRQUF2QixFQUFpQyxJQUFBLEdBQUssS0FBdEMsRUFBNkMsSUFBQSxHQUFLLEtBQUwsR0FBVyxRQUFYLEdBQW9CLEdBQWpFLEVBQXNFLElBQUEsR0FBSyxDQUFMLEdBQU8sR0FBN0UsRUFBa0YsSUFBQSxHQUFLLENBQUwsR0FBTyxRQUFQLEdBQWdCLEdBQWhCLEdBQW9CLEdBQXRHLEVBQTJHLElBQUEsR0FBSyxDQUFMLEdBQU8sUUFBUCxHQUFnQixLQUFoQixHQUFzQixHQUFqSTs7QUFDVCxRQUFBLEdBQVc7O0FBQ1gsUUFBUSxDQUFDLElBQVQsQ0FB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QUFNLENBQUM7SUFDN0IsUUFBQSxHQUFXLE1BQU0sQ0FBQyxLQUFELEVBRmxCOztFQUdBLElBQUcsR0FBQSxLQUFPLEdBQVY7SUFBbUIsUUFBQSxJQUFZLElBQS9COztFQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7SUFBbUIsUUFBQSxJQUFZLE1BQS9COztFQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7SUFBbUIsUUFBQSxJQUFZLFNBQS9COztFQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7SUFBbUIsUUFBQSxJQUFZLElBQS9COztFQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7SUFBbUIsUUFBQSxJQUFZLEVBQS9COztFQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7SUFBbUIsUUFBQSxJQUFZLEVBQS9COztFQUNBLElBQUcsR0FBQSxLQUFPLEdBQVY7V0FBbUIsUUFBQSxJQUFZLEtBQS9COztBQVZtQjs7QUFZcEIsTUFBTSxDQUFDLGFBQVAsR0FBdUIsUUFBQSxDQUFBLENBQUE7U0FBRyxZQUFBLENBQWEsV0FBQSxHQUFZLENBQXpCLEVBQTRCLFlBQUEsR0FBYSxDQUF6QztBQUFIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzd2lzc19kYXRhfSBmcm9tICcuL3N3aXNzLmpzJ1xyXG5pbXBvcnQge2Vsb19kYXRhfSBmcm9tICcuL2Vsby5qcydcclxuXHJcbnJhbmdlID0gXy5yYW5nZVxyXG5wcmludCA9IGNvbnNvbGUubG9nXHJcblxyXG5bRUxPLFNXSVNTLERJU1RBTkNFLEdBUCxYLFksR1JJRF0gPSBbMSwyLDQsOCwxNiwzMiw2NF1cclxuXHJcbnRfYWN0aXZlID0gMFxyXG5cclxudG91cm5hbWVudHMgPSBbXVxyXG5cclxuc3RhdGVzID0gWzAsIEdSSUQsIEdSSUQrWCwgR1JJRCtESVNUQU5DRSwgR1JJRCtTV0lTUywgR1JJRCtTV0lTUytESVNUQU5DRStHQVAsIEdSSUQrWCtFTE8sIEdSSUQrWCtESVNUQU5DRStFTE8rR0FQLCBHUklEK1grRElTVEFOQ0UrU1dJU1MrRUxPXVxyXG5tZXNzYWdlcyA9IFtdXHJcbm1lc3NhZ2VzLnB1c2ggXCJ8XCJcclxubWVzc2FnZXMucHVzaCBcIjEuIEVhY2ggYXhpcyBjb250YWlucyBlbG8gcmF0aW5nIGZvciBvbmUgcGxheWVyfGJldHdlZW4gMTQwMCBhbmQgMjQwMCBlbG9zLiBQcmVzcyBTcGFjZVwiXHJcbm1lc3NhZ2VzLnB1c2ggXCIyLiBUaGVyZSBhcmUgNzggcGxheWVycywgdGhlc2UgYXJlIHRoZWlyIGVsb3MufE5vdGljZSB0aGUgTm9ybWFsIERpc3RyaWJ1dGlvbiwgbW9yZSBwZW9wbGUgaW4gdGhlIG1pZGRsZS5cIlxyXG5tZXNzYWdlcy5wdXNoIFwiMy4gVGhlIG1haW4gZGlhZ29uYWwgcmVwcmVzZW50cyBhIGdhcCBvZiB6ZXJvIGVsb3MufFRoZSBkaXN0YW5jZSBzdGVwIGlzIDEwMCBlbG9zLlwiXHJcbm1lc3NhZ2VzLnB1c2ggXCI0LiBTd2lzcyBQYWlyaW5nIHdpdGggZWlnaHQgcm91bmRzLiBUeXJlc8O2IE9wZW4gMjAyNHxIb3ZlciB0aGUgbW91c2UuIFdoZXJlIGlzIHRoZSBsYXJnZXN0L3NtYWxsZXN0IGdhcD9cIiAgXHJcbm1lc3NhZ2VzLnB1c2ggXCI1LiBUaGUgR2FwIGNvbnRhaW5zIGhhbGYgb2YgdGhlIGdhbWVzfFwiXHJcbm1lc3NhZ2VzLnB1c2ggXCI2LiBFTE8gUGFpcmluZyB3aXRoIGVpZ2h0IHJvdW5kcy58XCJcclxubWVzc2FnZXMucHVzaCBcIjcuIE1vc3QgRWxvIGdhbWVzIGhhdmUgYSBsb3cgR2FwLnxUaGUgdG9wIHNldmVuIGFuZCBib3R0b20gc2V2ZW4gcGxheWVycyBhcmUgYWxsIG1lZXRpbmcgZWFjaCBvdGhlci5cIlxyXG5tZXNzYWdlcy5wdXNoIFwiOC4gWW91IHNlbGRvbSBtZWV0IHlvdXIgRWxvIG5laWdoYm91cnMgdXNpbmcgU3dpc3N8UHJlc3Mgb25lIG9mIHRoZSBsZXR0ZXJzIGJlbG93IG9yIFNwYWNlIVwiXHJcblxyXG5zdGF0ZSA9IDBcclxuXHJcbmNsYXNzIFRvdXJuYW1lbnRcclxuXHRjb25zdHJ1Y3RvciA6IChAdGl0bGUsIEBjb2xvciwgQHkwLCBAZGF0YSkgLT5cclxuXHRcdGxpbmVzID0gQGRhdGEuc3BsaXQgXCJcXG5cIlx0XHJcblx0XHRAcG9pbnRzID0gW11cclxuXHRcdHRvdGFsID0gMFxyXG5cdFx0Zm9yIGxpbmUgaW4gbGluZXNcclxuXHRcdFx0Y2VsbHMgPSBsaW5lLnNwbGl0IFwiXFx0XCJcclxuXHRcdFx0eCA9IHBhcnNlSW50IGNlbGxzWzBdXHJcblx0XHRcdHkgPSBwYXJzZUludCBjZWxsc1sxXVxyXG5cdFx0XHRpZiB4PT0xNDAwIG9yIHk9PTE0MDAgdGhlbiBjb250aW51ZVxyXG5cdFx0XHR0b3RhbCArPSBhYnMgeC15XHJcblx0XHRcdEBwb2ludHMucHVzaCBbeCx5XVxyXG5cdFx0QGF2ZXJhZ2UgPSB0b3RhbCAvIEBwb2ludHMubGVuZ3RoXHJcblx0XHRAdGl0bGUgKz0gXCIgKGF2ZXJhZ2UgZWxvIGdhcCA9ICN7QGF2ZXJhZ2UudG9GaXhlZCAwfSlcIlxyXG5cclxuXHRkcmF3WCA6IC0+XHJcblx0XHRwdXNoKClcclxuXHRcdHN0cm9rZSAnZGFya2dyYXknXHJcblx0XHRmb3IgcCBpbiBAcG9pbnRzXHJcblx0XHRcdHggPSBwWzBdXHJcblx0XHRcdGxpbmUgeC0xMzUwLCA1MCwgeC0xMzUwLCAxMDUwXHJcblx0XHRwb3AoKVxyXG5cclxuXHRkcmF3WSA6IC0+XHJcblx0XHRwdXNoKClcclxuXHRcdHN0cm9rZSAnZGFya2dyYXknXHJcblx0XHRmb3IgcCBpbiBAcG9pbnRzXHJcblx0XHRcdHggPSBwWzBdXHJcblx0XHRcdGxpbmUgNTAsIDI0NTAteCwgMTA1MCwgMjQ1MC14XHJcblx0XHRwb3AoKVxyXG5cclxuXHRkcmF3R3JpZCA6IC0+XHJcblx0XHRwdXNoKClcclxuXHRcdGZpbGwgJ2JsYWNrJ1xyXG5cdFx0c3Ryb2tlICdibGFjaydcclxuXHRcdHRleHRBbGlnbiBDRU5URVJcclxuXHRcdGZvciBpIGluIHJhbmdlIDE0MDAsMjUwMCwxMDBcclxuXHRcdFx0dGV4dCBpLy8xMDAsICAgaS0xMzUwLCAgMTA4MFxyXG5cdFx0XHR0ZXh0IDM4LWkvLzEwMCwgICAgMjAsaS0xMzUwXHJcblx0XHRcdGxpbmUgMjQ1MC1pLCAgICAgNTAsIDI0NTAtaSwgMTA1MFxyXG5cdFx0XHRsaW5lICAgICA1MCwgMjQ1MC1pLCAxMDUwLCAgIDI0NTAtaVxyXG5cdFx0cG9wKClcclxuXHJcblx0ZHJhd0dhcCA6IC0+XHJcblx0XHRpZiB0X2FjdGl2ZSAmIEdBUFxyXG5cdFx0XHRpZiB0X2FjdGl2ZSAmIEVMTyB0aGVuIGQgPSA3M1xyXG5cdFx0XHRpZiB0X2FjdGl2ZSAmIFNXSVNTIHRoZW4gZCA9IDE1NVxyXG5cdFx0XHRwdXNoKClcclxuXHRcdFx0c3Ryb2tlICdibGFjaydcclxuXHRcdFx0c3Ryb2tlV2VpZ2h0IHNxcnQoMikgKiBAYXZlcmFnZVxyXG5cdFx0XHRsaW5lIDExMDAtZCxkLGQsMTEwMC1kXHJcblx0XHRcdHN0cm9rZVdlaWdodCAxXHJcblx0XHRcdGZpbGwgJ2JsYWNrJ1xyXG5cdFx0XHRyZWN0IDUwLDEwNTAsNTArQGF2ZXJhZ2UsMTA1MC1AYXZlcmFnZVxyXG5cdFx0XHRyZWN0IDEwNTAsNTAsMTA1MC1AYXZlcmFnZSw1MCtAYXZlcmFnZVxyXG5cdFx0XHRwb3AoKVxyXG5cclxuXHRkcmF3RGlzdGFuY2UgOiAtPlxyXG5cdFx0c3Ryb2tlICd5ZWxsb3cnXHJcblx0XHRmb3IgaSBpbiByYW5nZSAxMFxyXG5cdFx0XHR4MCA9IDUwK2kqMTAwXHJcblx0XHRcdHkxID0gaSoxMDArNTBcclxuXHRcdFx0bGluZSB4MCwxMDUwLDEwNTAseTFcclxuXHRcdFx0bGluZSB4MCwgIDUwLCAgNTAseTFcclxuXHJcblx0ZHJhdyA6ICAtPlxyXG5cdFx0aSA9IDBcclxuXHRcdGZpbGwgQGNvbG9yXHJcblx0XHRzdHJva2UgJ2JsYWNrJ1xyXG5cdFx0dGV4dEFsaWduIExFRlRcclxuXHRcdHRleHQgQHRpdGxlLCA5NTArMTUwLCBAeTBcclxuXHRcdGZvciBbeCx5XSBpbiBAcG9pbnRzXHJcblx0XHRcdHNpemUgPSAyICogc3FydCBhYnMgeC15XHJcblx0XHRcdGNpcmNsZSB4LTEzNTAsIDI0NTAteSwgMiArIHNpemVcclxuXHRcdFx0eG0gPSBtb3VzZVggLyAoaGVpZ2h0LzExMDApXHJcblx0XHRcdHltID0gbW91c2VZIC8gKGhlaWdodC8xMTAwKVxyXG5cdFx0XHRpZiB4LXNpemUvMiA8IDEzNTAreG0gPCB4K3NpemUvMiBhbmQgeS1zaXplLzIgPCAyNDUwLXltIDwgeStzaXplLzIgXHJcblx0XHRcdFx0cHVzaCgpXHJcblx0XHRcdFx0ZmlsbCAnYmxhY2snXHJcblx0XHRcdFx0dGV4dCBcIiN7eH0gdnMgI3t5fSA9PiAje2FicyB4LXl9XCIsIDk1MCsxNTAsIDUwICsgQHkwICsgNTAqaVxyXG5cdFx0XHRcdGkgKz0gMVxyXG5cdFx0XHRcdHBvcCgpXHJcblxyXG53aW5kb3cuc2V0dXAgPSAtPiBcclxuXHRjcmVhdGVDYW52YXMgd2luZG93V2lkdGgtNCx3aW5kb3dIZWlnaHQtNFxyXG5cdHJlY3RNb2RlIENPUk5FUlNcclxuXHRzdHJva2VDYXAgU1FVQVJFXHJcblx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHR0ZXh0U2l6ZSAzMlxyXG5cdHRvdXJuYW1lbnRzLnB1c2ggbmV3IFRvdXJuYW1lbnQgXCJTd2lzcyBQYWlyaW5nXCIsWzI1NSwwLDAsMTI4XSwgNTAsIHN3aXNzX2RhdGFcclxuXHR0b3VybmFtZW50cy5wdXNoIG5ldyBUb3VybmFtZW50IFwiRUxPIFBhaXJpbmdcIiwgIFswLDI1NSwwLDEyOF0sIDU1MCwgZWxvX2RhdGFcclxuXHJcbndpbmRvdy5kcmF3ID0gLT5cclxuXHRiYWNrZ3JvdW5kICdncmF5J1xyXG5cdHNjYWxlIGhlaWdodC8xMTAwXHJcblxyXG5cdGlmIHRfYWN0aXZlIFxyXG5cclxuXHRcdGlmIHRfYWN0aXZlICYgR0FQIFxyXG5cdFx0XHRpZiB0X2FjdGl2ZSAmIFNXSVNTIHRoZW4gdG91cm5hbWVudHNbMF0uZHJhd0dhcCgpXHJcblx0XHRcdGlmIHRfYWN0aXZlICYgRUxPICAgdGhlbiB0b3VybmFtZW50c1sxXS5kcmF3R2FwKClcclxuXHRcdGlmIHRfYWN0aXZlICYgWCAgICAgICAgIHRoZW4gdG91cm5hbWVudHNbMF0uZHJhd1goKVxyXG5cdFx0aWYgdF9hY3RpdmUgJiBZICAgICAgICAgdGhlbiB0b3VybmFtZW50c1swXS5kcmF3WSgpXHJcblx0XHRpZiB0X2FjdGl2ZSAmIEdSSUQgICAgICB0aGVuIHRvdXJuYW1lbnRzWzBdLmRyYXdHcmlkKClcclxuXHRcdGlmIHRfYWN0aXZlICYgRElTVEFOQ0UgIHRoZW4gdG91cm5hbWVudHNbMF0uZHJhd0Rpc3RhbmNlKClcclxuXHRcdGlmIHRfYWN0aXZlICYgU1dJU1MgICAgIHRoZW4gdG91cm5hbWVudHNbMF0uZHJhdygpXHJcblx0XHRpZiB0X2FjdGl2ZSAmIEVMTyAgICAgICB0aGVuIHRvdXJuYW1lbnRzWzFdLmRyYXcoKVxyXG5cdGVsc2VcclxuXHRcdGZpbGwgJ2JsYWNrJ1xyXG5cdFx0bm9TdHJva2UoKVxyXG5cdFx0dGV4dCBcImUgPSBlbG9cIiwgICAgICAgd2lkdGgvMiwxMDBcclxuXHRcdHRleHQgXCJzID0gc3dpc3NcIiwgICAgIHdpZHRoLzIsMjAwXHJcblx0XHR0ZXh0IFwiZCA9IGRpc3RhbmNlXCIsICB3aWR0aC8yLDMwMFxyXG5cdFx0dGV4dCBcImcgPSBnYXBcIiwgICAgICAgd2lkdGgvMiw0MDBcclxuXHRcdHRleHQgXCJ4ID0gcGxheWVycyB4XCIsIHdpZHRoLzIsNTAwXHJcblx0XHR0ZXh0IFwieSA9IHBsYXllcnMgeVwiLCB3aWR0aC8yLDYwMFxyXG5cdFx0dGV4dCBcInIgPSBncmlkXCIsICAgICAgd2lkdGgvMiw3MDBcclxuXHRcdHRleHQgXCJTcGFjZSA9IGd1aWRlZCB0b3VyXCIsIHdpZHRoLzIsODAwXHJcblxyXG5cdG5vU3Ryb2tlKClcclxuXHRmb3IgaSBpbiByYW5nZSA3XHJcblx0XHRmaWxsIGlmIHRfYWN0aXZlICYgMioqaSB0aGVuICd3aGl0ZScgZWxzZSAnYmxhY2snXHJcblx0XHR0ZXh0ICdlc2RneHlyJ1tpXSwxMzAwK2kqMjAsMTA4MFxyXG5cclxuXHRwdXNoKClcclxuXHR0ZXh0QWxpZ24gTEVGVFxyXG5cdGFyciA9IG1lc3NhZ2VzW3N0YXRlXS5zcGxpdCAnfCdcclxuXHR0ZXh0IGFyclswXSwxMTAwLDgwMFxyXG5cdHRleHQgYXJyWzFdLDExMDAsOTAwXHJcblx0cG9wKClcclxuXHJcbndpbmRvdy5tb3VzZVByZXNzZWQgPSAtPiB0X2FjdGl2ZSA9IDBcclxuXHJcbndpbmRvdy5rZXlQcmVzc2VkID0gLT4gXHJcblx0aWYga2V5ID09ICcgJyBcclxuXHRcdHN0YXRlID0gKHN0YXRlICsgMSkgJSBzdGF0ZXMubGVuZ3RoXHJcblx0XHR0X2FjdGl2ZSA9IHN0YXRlc1tzdGF0ZV1cclxuXHRpZiBrZXkgPT0gJ2UnIHRoZW4gdF9hY3RpdmUgXj0gRUxPXHJcblx0aWYga2V5ID09ICdzJyB0aGVuIHRfYWN0aXZlIF49IFNXSVNTXHJcblx0aWYga2V5ID09ICdkJyB0aGVuIHRfYWN0aXZlIF49IERJU1RBTkNFXHJcblx0aWYga2V5ID09ICdnJyB0aGVuIHRfYWN0aXZlIF49IEdBUFxyXG5cdGlmIGtleSA9PSAneCcgdGhlbiB0X2FjdGl2ZSBePSBYXHJcblx0aWYga2V5ID09ICd5JyB0aGVuIHRfYWN0aXZlIF49IFlcclxuXHRpZiBrZXkgPT0gJ3InIHRoZW4gdF9hY3RpdmUgXj0gR1JJRFxyXG5cclxud2luZG93LndpbmRvd1Jlc2l6ZWQgPSAtPiByZXNpemVDYW52YXMgd2luZG93V2lkdGgtNCwgd2luZG93SGVpZ2h0LTRcclxuIl19
//# sourceURL=c:\github\2024\027-BubbleChart\coffee\sketch.coffee