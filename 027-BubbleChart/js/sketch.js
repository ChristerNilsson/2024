// Generated by CoffeeScript 2.7.0
var DISTANCE, ELO, GAP, PLAYERS, SWISS, Tournament, print, range, t_active, tournaments;

import {
  swiss_data
} from './swiss.js';

import {
  elo_data
} from './elo.js';

range = _.range;

print = console.log;

[ELO, SWISS, DISTANCE, GAP, PLAYERS] = [1, 2, 4, 8, 16];

t_active = 0;

tournaments = [];

Tournament = class Tournament {
  constructor(title, color, y0, data) {
    var cells, j, len, line, lines, total, x, y;
    this.title = title;
    this.color = color;
    this.y0 = y0;
    this.data = data;
    lines = this.data.split("\n");
    this.points = [];
    total = 0;
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      cells = line.split("\t");
      x = parseInt(cells[0]);
      y = parseInt(cells[1]);
      if (x === 1400 || y === 1400) {
        continue;
      }
      total += abs(x - y);
      this.points.push([x, y]);
    }
    this.average = total / this.points.length;
    this.title += " avg=" + this.average.toFixed(0);
  }

  drawLines() {
    var j, len, p, ref, x;
    push();
    stroke('darkgray');
    ref = this.points;
    for (j = 0, len = ref.length; j < len; j++) {
      p = ref[j];
      x = p[0];
      line(2450 - x, 0, 2450 - x, height * 2);
    }
    return pop();
  }

  draw() {
    var i, j, len, ref, ref1, ref2, results, size, x, xm, y, ym;
    i = 0;
    if (t_active & GAP) {
      push();
      stroke('black');
      strokeWeight(sqrt(2) * this.average);
      line(0, 0, 1200, 1200);
      strokeWeight(1);
      stroke('white');
      line(0, 0, 1200, 1200);
      pop();
    }
    fill(this.color);
    stroke('black');
    text(this.title, 950, this.y0);
    ref = this.points;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      [x, y] = ref[j];
      size = 2 * sqrt(abs(x - y));
      circle(2450 - x, 2450 - y, 2 + size);
      xm = mouseX / (height / 1100);
      ym = mouseY / (height / 1100);
      if ((x - size / 2 < (ref1 = 2450 - xm) && ref1 < x + size / 2) && (y - size / 2 < (ref2 = 2450 - ym) && ref2 < y + size / 2)) {
        push();
        fill('black');
        text(`${x} vs ${y} => ${abs(x - y)}`, 950, 150 + 50 * i);
        i += 1;
        results.push(pop());
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

window.setup = function() {
  createCanvas(windowWidth - 4, windowHeight - 4);
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  textSize(32);
  tournaments.push(new Tournament("Swiss Pairing", [255, 0, 0, 128], 100, swiss_data));
  return tournaments.push(new Tournament("ELO Pairing", [0, 255, 0, 128], 50, elo_data));
};

window.draw = function() {
  var i, j, len, ref;
  background('gray');
  scale(height / 1100);
  if (t_active) {
    if (t_active & DISTANCE) {
      ref = range(-13, 13);
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        stroke('yellow');
        line(0, 0 + i * 100, 1200, 1200 + i * 100);
      }
    }
    if (t_active & PLAYERS) {
      tournaments[0].drawLines();
    }
    if (t_active & SWISS) {
      tournaments[0].draw();
    }
    if (t_active & ELO) {
      return tournaments[1].draw();
    }
  } else {
    fill('black');
    noStroke();
    text("e = elo", width / 2, 100);
    text("s = swiss", width / 2, 200);
    text("d = distance", width / 2, 300);
    text("g = gap", width / 2, 400);
    return text("p = players", width / 2, 500);
  }
};

window.mousePressed = function() {
  return t_active = 0;
};

window.keyPressed = function() {
  if (key === 'e') {
    t_active ^= ELO;
  }
  if (key === 's') {
    t_active ^= SWISS;
  }
  if (key === 'd') {
    t_active ^= DISTANCE;
  }
  if (key === 'g') {
    t_active ^= GAP;
  }
  if (key === 'p') {
    return t_active ^= PLAYERS;
  }
};

window.windowResized = function() {
  return resizeCanvas(windowWidth - 4, windowHeight - 4);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2024\027-BubbleChart\coffee\sketch.coffee