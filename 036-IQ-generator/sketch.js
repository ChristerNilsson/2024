// Generated by CoffeeScript 2.7.0
var abcd, actual, answers, bg, buttons, correct, echo, expected, feedback, figures, landscape, makeProblems, newProblem, nr, pressed, problems, range, show, start, unit, wrong;

range = _.range;

echo = console.log;

pressed = false;

start = new Date();

landscape = true;

bg = 'grey';

abcd = [];

figures = [];

answers = [];

correct = 0;

wrong = 0;

expected = -1;

actual = -1;

feedback = false;

problems = [];

nr = -1;

unit = 0;

newProblem = function() {
  var n, odd, results, x;
  feedback = false;
  expected = -1;
  actual = -1;
  nr = (nr + 1) % problems.length;
  odd = _.sample([false, true]);
  n = problems[nr].length; // 5,12 eller 8
  results = [];
  while (true) {
    figures = _.sampleSize(range(1 << n), 9);
    abcd = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    abcd[0] = figures[0];
    abcd[1] = figures[1];
    abcd[3] = figures[2];
    abcd[4] = figures[3];
    x = odd ? 2 ** n - 1 : 0;
    abcd[2] = abcd[0] ^ abcd[1] ^ x;
    abcd[5] = abcd[3] ^ abcd[4] ^ x;
    abcd[6] = abcd[0] ^ abcd[3] ^ x;
    abcd[7] = abcd[1] ^ abcd[4] ^ x;
    abcd[8] = abcd[2] ^ abcd[5] ^ x; // the secret questionmark
    answers = [];
    answers.push(figures[4]);
    answers.push(figures[5]);
    answers.push(figures[6]);
    answers.push(figures[7]);
    answers.push(figures[8]);
    answers.push(abcd[8]);
    answers = _.uniq(answers);
    answers = _.shuffle(answers);
    expected = answers.indexOf(abcd[8]);
    if (answers.length === 6) {
      break;
    } else {
      results.push(void 0);
    }
  }
  return results;
};

buttons = [];

show = function(pattern, i = -1, expected, actual) {
  var ix, l, len, ref, results;
  stroke('black');
  if (actual === -1) {
    fill('white');
  } else if (expected === i) {
    fill('green');
    rect(0, 0, unit, unit);
  } else if (actual === i) {
    fill('red');
    rect(0, 0, unit, unit);
  }
  strokeWeight(nr === 1 ? 1 : 0.03 * unit);
  stroke('white');
  fill('white');
  ref = range(problems[nr].length);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    ix = ref[l];
    if (pattern & (1 << ix)) {
      results.push(problems[nr][ix]());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

window.setup = function() {
  var i, j, l, len, len1, m, ref, ref1;
  createCanvas(innerWidth - 5, innerHeight - 5);
  unit = width / 7.5;
  ref = [1 * unit, 2 * unit];
  for (l = 0, len = ref.length; l < len; l++) {
    j = ref[l];
    ref1 = [4 * unit, 5 * unit, 6 * unit];
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      i = ref1[m];
      buttons.push([i, j]);
    }
  }
  makeProblems();
  textAlign(CENTER, CENTER);
  textSize(0.5 * unit);
  return newProblem();
};

window.draw = function() {
  var i, j, l, len, len1, len2, len3, len4, len5, len6, m, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, s, xs, ys;
  background('grey');
  stroke('black');
  strokeWeight(0.03 * unit);
  // Rita 4x4 linjer
  xs = [0.5 * unit, 1.5 * unit, 2.5 * unit, 3.5 * unit];
  ys = [1.5 * unit, 2.5 * unit, 3.5 * unit];
  ref = range(4);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    line(xs[0], xs[i], xs[3], xs[i]);
    line(xs[i], xs[0], xs[i], xs[3]);
  }
  stroke('white');
  ref1 = range(3);
  // Rita 3x3 problem
  for (m = 0, len1 = ref1.length; m < len1; m++) {
    i = ref1[m];
    ref2 = range(3);
    for (o = 0, len2 = ref2.length; o < len2; o++) {
      j = ref2[o];
      push();
      translate((i + 0.5) * unit, (j + 0.5) * unit);
      if (i === 2 && j === 2) {
        fill('white');
        textSize(unit);
        text('?', unit / 2, 0.55 * unit);
      } else {
        noStroke();
        show(abcd[i + 3 * j], -1, -1, -1);
      }
      pop();
    }
  }
  noStroke();
  fill('yellow');
  text(`${correct} of ${correct + wrong}`, 5.5 * unit, 0.7 * unit);
  text(round((new Date() - start) / 1000) + "s", 5.5 * unit, 3.3 * unit);
  fill('white');
  // Answers
  push();
  translate(3.5 * unit, 0);
  // Rita 3x4 linjer
  stroke('black');
  strokeWeight(0.03 * unit);
  xs = [0.5 * unit, 1.5 * unit, 2.5 * unit, 3.5 * unit];
  ys = [1.0 * unit, 2.0 * unit, 3.0 * unit];
  ref3 = range(4);
  for (p = 0, len3 = ref3.length; p < len3; p++) {
    i = ref3[p];
    line(xs[i], ys[0], xs[i], ys[2]);
  }
  ref4 = range(3);
  for (q = 0, len4 = ref4.length; q < len4; q++) {
    i = ref4[q];
    line(xs[0], ys[i], xs[3], ys[i]);
  }
  // Rita 3x2 svar
  stroke('white');
  ref5 = range(3);
  for (r = 0, len5 = ref5.length; r < len5; r++) {
    i = ref5[r];
    ref6 = range(2);
    for (s = 0, len6 = ref6.length; s < len6; s++) {
      j = ref6[s];
      push();
      translate(xs[i], ys[j]);
      show(answers[i + 3 * j], i + 3 * j, expected, actual);
      pop();
    }
  }
  return pop();
};

window.mousePressed = function() {
  var i, l, len, ref, results, x, y;
  if (pressed) {
    return;
  }
  pressed = true;
  if (feedback) {
    newProblem();
    return;
  }
  ref = range(buttons.length);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    [x, y] = buttons[i];
    if ((x < mouseX && mouseX < x + unit) && (y < mouseY && mouseY < y + unit)) {
      actual = i;
      if (expected === actual) {
        correct += 1;
        results.push(newProblem());
      } else {
        wrong += 1;
        results.push(feedback = true);
      }
    } else {
      results.push(void 0);
    }
  }
  return results;
};

window.mouseReleased = function() {
  return pressed = false;
};

makeProblems = function() {
  var i, j, l, len, len1, m, points, ref, ref1, tri;
  points = [];
  ref = [0.1 * unit, 0.5 * unit, 0.9 * unit];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    ref1 = [0.1 * unit, 0.5 * unit, 0.9 * unit];
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      j = ref1[m];
      points.push([j, i]);
    }
  }
  tri = function(i, j, k) {
    var a, b, c;
    a = points[i];
    b = points[j];
    c = points[k];
    return triangle(a[0], a[1], b[0], b[1], c[0], c[1]);
  };
  problems.push([
    function() {
      return circle(0.5 * unit,
    0.5 * unit,
    0.5 * unit);
    },
    function() {
      return circle(0.3 * unit,
    0.7 * unit,
    0.5 * unit);
    },
    function() {
      return circle(0.7 * unit,
    0.3 * unit,
    0.5 * unit);
    },
    function() {
      return circle(0.3 * unit,
    0.3 * unit,
    0.5 * unit);
    },
    function() {
      return circle(0.7 * unit,
    0.7 * unit,
    0.5 * unit);
    }
  ]);
  problems.push([
    function() {
      return tri(0,
    3,
    4);
    },
    function() {
      return tri(0,
    1,
    4);
    },
    function() {
      return tri(1,
    2,
    4);
    },
    function() {
      return tri(2,
    4,
    5);
    },
    function() {
      return tri(4,
    5,
    8);
    },
    function() {
      return tri(4,
    7,
    8);
    },
    function() {
      return tri(4,
    6,
    7);
    },
    function() {
      return tri(3,
    4,
    6);
    }
  ]);
  return problems.push([
    function() {
      return circle(0.5 * unit,
    0.3 * unit,
    9);
    },
    function() {
      return circle(0.25 * unit,
    0.5 * unit,
    9);
    },
    function() {
      return circle(0.7 * unit,
    0.5 * unit,
    9);
    },
    function() {
      return circle(0.5 * unit,
    0.7 * unit,
    9);
    },
    function() {
      return line(0.1 * unit,
    0.5 * unit,
    0.5 * unit,
    0.5 * unit);
    },
    function() {
      return line(0.5 * unit,
    0.5 * unit,
    0.9 * unit,
    0.5 * unit);
    },
    function() {
      return line(0.5 * unit,
    0.1 * unit,
    0.5 * unit,
    0.5 * unit);
    },
    function() {
      return line(0.5 * unit,
    0.5 * unit,
    0.5 * unit,
    0.9 * unit);
    },
    function() {
      noFill();
      return arc(0.5 * unit,
    0.5 * unit,
    0.8 * unit,
    0.8 * unit,
    0 * HALF_PI,
    1 * HALF_PI);
    },
    function() {
      noFill();
      return arc(0.5 * unit,
    0.5 * unit,
    0.8 * unit,
    0.8 * unit,
    1 * HALF_PI,
    2 * HALF_PI);
    },
    function() {
      noFill();
      return arc(0.5 * unit,
    0.5 * unit,
    0.8 * unit,
    0.8 * unit,
    2 * HALF_PI,
    3 * HALF_PI);
    },
    function() {
      noFill();
      return arc(0.5 * unit,
    0.5 * unit,
    0.8 * unit,
    0.8 * unit,
    3 * HALF_PI,
    4 * HALF_PI);
    }
  ]);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6IlxcIiwic291cmNlcyI6WyJza2V0Y2guY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLElBQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQSxTQUFBLEVBQUEsWUFBQSxFQUFBLFVBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUE7O0FBQUEsS0FBQSxHQUFRLENBQUMsQ0FBQzs7QUFDVixJQUFBLEdBQU8sT0FBTyxDQUFDOztBQUNmLE9BQUEsR0FBVTs7QUFFVixLQUFBLEdBQVEsSUFBSSxJQUFKLENBQUE7O0FBRVIsU0FBQSxHQUFZOztBQUVaLEVBQUEsR0FBSzs7QUFFTCxJQUFBLEdBQU87O0FBQ1AsT0FBQSxHQUFVOztBQUNWLE9BQUEsR0FBVTs7QUFFVixPQUFBLEdBQVU7O0FBQ1YsS0FBQSxHQUFROztBQUVSLFFBQUEsR0FBVyxDQUFDOztBQUNaLE1BQUEsR0FBUyxDQUFDOztBQUNWLFFBQUEsR0FBVzs7QUFFWCxRQUFBLEdBQVc7O0FBQ1gsRUFBQSxHQUFLLENBQUM7O0FBQ04sSUFBQSxHQUFPOztBQUVQLFVBQUEsR0FBYSxRQUFBLENBQUEsQ0FBQTtBQUNiLE1BQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUE7RUFBQyxRQUFBLEdBQVc7RUFDWCxRQUFBLEdBQVcsQ0FBQztFQUNaLE1BQUEsR0FBUyxDQUFDO0VBQ1YsRUFBQSxHQUFLLENBQUMsRUFBQSxHQUFHLENBQUosQ0FBQSxHQUFTLFFBQVEsQ0FBQztFQUN2QixHQUFBLEdBQU0sQ0FBQyxDQUFDLE1BQUYsQ0FBUyxDQUFDLEtBQUQsRUFBTyxJQUFQLENBQVQ7RUFDTixDQUFBLEdBQUksUUFBUSxDQUFDLEVBQUQsQ0FBSSxDQUFDLE9BTGxCO0FBTUM7U0FBTSxJQUFOO0lBQ0MsT0FBQSxHQUFVLENBQUMsQ0FBQyxVQUFGLENBQWEsS0FBQSxDQUFNLENBQUEsSUFBSyxDQUFYLENBQWIsRUFBNEIsQ0FBNUI7SUFFVixJQUFBLEdBQU8sQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxFQUFXLENBQVgsRUFBYSxDQUFiLEVBQWUsQ0FBZixFQUFpQixDQUFqQjtJQUNQLElBQUksQ0FBQyxDQUFELENBQUosR0FBVSxPQUFPLENBQUMsQ0FBRDtJQUNqQixJQUFJLENBQUMsQ0FBRCxDQUFKLEdBQVUsT0FBTyxDQUFDLENBQUQ7SUFDakIsSUFBSSxDQUFDLENBQUQsQ0FBSixHQUFVLE9BQU8sQ0FBQyxDQUFEO0lBQ2pCLElBQUksQ0FBQyxDQUFELENBQUosR0FBVSxPQUFPLENBQUMsQ0FBRDtJQUVqQixDQUFBLEdBQU8sR0FBSCxHQUFZLENBQUEsSUFBSyxDQUFMLEdBQVMsQ0FBckIsR0FBNEI7SUFFaEMsSUFBSSxDQUFDLENBQUQsQ0FBSixHQUFVLElBQUksQ0FBQyxDQUFELENBQUosR0FBVSxJQUFJLENBQUMsQ0FBRCxDQUFkLEdBQW9CO0lBQzlCLElBQUksQ0FBQyxDQUFELENBQUosR0FBVSxJQUFJLENBQUMsQ0FBRCxDQUFKLEdBQVUsSUFBSSxDQUFDLENBQUQsQ0FBZCxHQUFvQjtJQUM5QixJQUFJLENBQUMsQ0FBRCxDQUFKLEdBQVUsSUFBSSxDQUFDLENBQUQsQ0FBSixHQUFVLElBQUksQ0FBQyxDQUFELENBQWQsR0FBb0I7SUFDOUIsSUFBSSxDQUFDLENBQUQsQ0FBSixHQUFVLElBQUksQ0FBQyxDQUFELENBQUosR0FBVSxJQUFJLENBQUMsQ0FBRCxDQUFkLEdBQW9CO0lBQzlCLElBQUksQ0FBQyxDQUFELENBQUosR0FBVSxJQUFJLENBQUMsQ0FBRCxDQUFKLEdBQVUsSUFBSSxDQUFDLENBQUQsQ0FBZCxHQUFvQixFQWRoQztJQWdCRSxPQUFBLEdBQVU7SUFDVixPQUFPLENBQUMsSUFBUixDQUFhLE9BQU8sQ0FBQyxDQUFELENBQXBCO0lBQ0EsT0FBTyxDQUFDLElBQVIsQ0FBYSxPQUFPLENBQUMsQ0FBRCxDQUFwQjtJQUNBLE9BQU8sQ0FBQyxJQUFSLENBQWEsT0FBTyxDQUFDLENBQUQsQ0FBcEI7SUFDQSxPQUFPLENBQUMsSUFBUixDQUFhLE9BQU8sQ0FBQyxDQUFELENBQXBCO0lBQ0EsT0FBTyxDQUFDLElBQVIsQ0FBYSxPQUFPLENBQUMsQ0FBRCxDQUFwQjtJQUNBLE9BQU8sQ0FBQyxJQUFSLENBQWEsSUFBSSxDQUFDLENBQUQsQ0FBakI7SUFFQSxPQUFBLEdBQVUsQ0FBQyxDQUFDLElBQUYsQ0FBTyxPQUFQO0lBQ1YsT0FBQSxHQUFVLENBQUMsQ0FBQyxPQUFGLENBQVUsT0FBVjtJQUVWLFFBQUEsR0FBVyxPQUFPLENBQUMsT0FBUixDQUFnQixJQUFJLENBQUMsQ0FBRCxDQUFwQjtJQUNYLElBQUcsT0FBTyxDQUFDLE1BQVIsS0FBa0IsQ0FBckI7QUFBNEIsWUFBNUI7S0FBQSxNQUFBOzJCQUFBOztFQTdCRCxDQUFBOztBQVBZOztBQXNDYixPQUFBLEdBQVU7O0FBRVYsSUFBQSxHQUFPLFFBQUEsQ0FBQyxPQUFELEVBQVMsSUFBRSxDQUFDLENBQVosRUFBYyxRQUFkLEVBQXVCLE1BQXZCLENBQUE7QUFDUCxNQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQTtFQUFDLE1BQUEsQ0FBTyxPQUFQO0VBQ0EsSUFBRyxNQUFBLEtBQVUsQ0FBQyxDQUFkO0lBQXFCLElBQUEsQ0FBSyxPQUFMLEVBQXJCO0dBQUEsTUFDSyxJQUFHLFFBQUEsS0FBWSxDQUFmO0lBQ0osSUFBQSxDQUFLLE9BQUw7SUFDQSxJQUFBLENBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxJQUFULEVBQWMsSUFBZCxFQUZJO0dBQUEsTUFHQSxJQUFHLE1BQUEsS0FBVSxDQUFiO0lBQ0osSUFBQSxDQUFLLEtBQUw7SUFDQSxJQUFBLENBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxJQUFULEVBQWMsSUFBZCxFQUZJOztFQUlMLFlBQUEsQ0FBZ0IsRUFBQSxLQUFJLENBQVAsR0FBYyxDQUFkLEdBQXFCLElBQUEsR0FBTyxJQUF6QztFQUNBLE1BQUEsQ0FBTyxPQUFQO0VBQ0EsSUFBQSxDQUFLLE9BQUw7QUFFQTtBQUFBO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxJQUFHLE9BQUEsR0FBVSxDQUFDLENBQUEsSUFBSyxFQUFOLENBQWI7bUJBQTRCLFFBQVEsQ0FBQyxFQUFELENBQUksQ0FBQyxFQUFELENBQVosQ0FBQSxHQUE1QjtLQUFBLE1BQUE7MkJBQUE7O0VBREQsQ0FBQTs7QUFkTTs7QUFpQlAsTUFBTSxDQUFDLEtBQVAsR0FBZSxRQUFBLENBQUEsQ0FBQTtBQUNmLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBO0VBQUMsWUFBQSxDQUFhLFVBQUEsR0FBVyxDQUF4QixFQUEwQixXQUFBLEdBQVksQ0FBdEM7RUFDQSxJQUFBLEdBQU8sS0FBQSxHQUFNO0FBRWI7RUFBQSxLQUFBLHFDQUFBOztBQUNDO0lBQUEsS0FBQSx3Q0FBQTs7TUFDQyxPQUFPLENBQUMsSUFBUixDQUFhLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBYjtJQUREO0VBREQ7RUFHQSxZQUFBLENBQUE7RUFDQSxTQUFBLENBQVUsTUFBVixFQUFpQixNQUFqQjtFQUNBLFFBQUEsQ0FBUyxHQUFBLEdBQU0sSUFBZjtTQUNBLFVBQUEsQ0FBQTtBQVZjOztBQVlmLE1BQU0sQ0FBQyxJQUFQLEdBQWMsUUFBQSxDQUFBLENBQUE7QUFDZCxNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBO0VBQUMsVUFBQSxDQUFXLE1BQVg7RUFDQSxNQUFBLENBQU8sT0FBUDtFQUNBLFlBQUEsQ0FBYSxJQUFBLEdBQU8sSUFBcEIsRUFGRDs7RUFLQyxFQUFBLEdBQUssQ0FBQyxHQUFBLEdBQUksSUFBTCxFQUFVLEdBQUEsR0FBSSxJQUFkLEVBQW1CLEdBQUEsR0FBSSxJQUF2QixFQUE0QixHQUFBLEdBQUksSUFBaEM7RUFDTCxFQUFBLEdBQUssQ0FBQyxHQUFBLEdBQUksSUFBTCxFQUFVLEdBQUEsR0FBSSxJQUFkLEVBQW1CLEdBQUEsR0FBSSxJQUF2QjtBQUNMO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxJQUFBLENBQUssRUFBRSxDQUFDLENBQUQsQ0FBUCxFQUFXLEVBQUUsQ0FBQyxDQUFELENBQWIsRUFBaUIsRUFBRSxDQUFDLENBQUQsQ0FBbkIsRUFBdUIsRUFBRSxDQUFDLENBQUQsQ0FBekI7SUFDQSxJQUFBLENBQUssRUFBRSxDQUFDLENBQUQsQ0FBUCxFQUFXLEVBQUUsQ0FBQyxDQUFELENBQWIsRUFBaUIsRUFBRSxDQUFDLENBQUQsQ0FBbkIsRUFBdUIsRUFBRSxDQUFDLENBQUQsQ0FBekI7RUFGRDtFQUlBLE1BQUEsQ0FBTyxPQUFQO0FBR0E7O0VBQUEsS0FBQSx3Q0FBQTs7QUFDQztJQUFBLEtBQUEsd0NBQUE7O01BQ0MsSUFBQSxDQUFBO01BQ0EsU0FBQSxDQUFVLENBQUMsQ0FBQSxHQUFFLEdBQUgsQ0FBQSxHQUFRLElBQWxCLEVBQXVCLENBQUMsQ0FBQSxHQUFFLEdBQUgsQ0FBQSxHQUFRLElBQS9CO01BQ0EsSUFBRyxDQUFBLEtBQUcsQ0FBSCxJQUFTLENBQUEsS0FBRyxDQUFmO1FBQ0MsSUFBQSxDQUFLLE9BQUw7UUFDQSxRQUFBLENBQVMsSUFBVDtRQUNBLElBQUEsQ0FBSyxHQUFMLEVBQVMsSUFBQSxHQUFLLENBQWQsRUFBZ0IsSUFBQSxHQUFPLElBQXZCLEVBSEQ7T0FBQSxNQUFBO1FBS0MsUUFBQSxDQUFBO1FBQ0EsSUFBQSxDQUFLLElBQUksQ0FBQyxDQUFBLEdBQUUsQ0FBQSxHQUFFLENBQUwsQ0FBVCxFQUFpQixDQUFDLENBQWxCLEVBQW9CLENBQUMsQ0FBckIsRUFBdUIsQ0FBQyxDQUF4QixFQU5EOztNQU9BLEdBQUEsQ0FBQTtJQVZEO0VBREQ7RUFhQSxRQUFBLENBQUE7RUFDQSxJQUFBLENBQUssUUFBTDtFQUNBLElBQUEsQ0FBSyxDQUFBLENBQUEsQ0FBRyxPQUFILENBQUEsSUFBQSxDQUFBLENBQWlCLE9BQUEsR0FBUSxLQUF6QixDQUFBLENBQUwsRUFBc0MsR0FBQSxHQUFJLElBQTFDLEVBQStDLEdBQUEsR0FBSSxJQUFuRDtFQUNBLElBQUEsQ0FBSyxLQUFBLENBQU0sQ0FBQyxJQUFJLElBQUosQ0FBQSxDQUFBLEdBQVcsS0FBWixDQUFBLEdBQW1CLElBQXpCLENBQUEsR0FBK0IsR0FBcEMsRUFBeUMsR0FBQSxHQUFJLElBQTdDLEVBQWtELEdBQUEsR0FBSSxJQUF0RDtFQUNBLElBQUEsQ0FBSyxPQUFMLEVBL0JEOztFQWtDQyxJQUFBLENBQUE7RUFDQSxTQUFBLENBQVUsR0FBQSxHQUFJLElBQWQsRUFBbUIsQ0FBbkIsRUFuQ0Q7O0VBc0NDLE1BQUEsQ0FBTyxPQUFQO0VBQ0EsWUFBQSxDQUFhLElBQUEsR0FBTyxJQUFwQjtFQUNBLEVBQUEsR0FBSyxDQUFDLEdBQUEsR0FBSSxJQUFMLEVBQVUsR0FBQSxHQUFJLElBQWQsRUFBbUIsR0FBQSxHQUFJLElBQXZCLEVBQTRCLEdBQUEsR0FBSSxJQUFoQztFQUNMLEVBQUEsR0FBSyxDQUFDLEdBQUEsR0FBSSxJQUFMLEVBQVUsR0FBQSxHQUFJLElBQWQsRUFBbUIsR0FBQSxHQUFJLElBQXZCO0FBQ0w7RUFBQSxLQUFBLHdDQUFBOztJQUNDLElBQUEsQ0FBSyxFQUFFLENBQUMsQ0FBRCxDQUFQLEVBQVcsRUFBRSxDQUFDLENBQUQsQ0FBYixFQUFpQixFQUFFLENBQUMsQ0FBRCxDQUFuQixFQUF1QixFQUFFLENBQUMsQ0FBRCxDQUF6QjtFQUREO0FBRUE7RUFBQSxLQUFBLHdDQUFBOztJQUNDLElBQUEsQ0FBSyxFQUFFLENBQUMsQ0FBRCxDQUFQLEVBQVcsRUFBRSxDQUFDLENBQUQsQ0FBYixFQUFpQixFQUFFLENBQUMsQ0FBRCxDQUFuQixFQUF1QixFQUFFLENBQUMsQ0FBRCxDQUF6QjtFQURELENBNUNEOztFQWdEQyxNQUFBLENBQU8sT0FBUDtBQUNBO0VBQUEsS0FBQSx3Q0FBQTs7QUFDQztJQUFBLEtBQUEsd0NBQUE7O01BQ0MsSUFBQSxDQUFBO01BQ0EsU0FBQSxDQUFVLEVBQUUsQ0FBQyxDQUFELENBQVosRUFBaUIsRUFBRSxDQUFDLENBQUQsQ0FBbkI7TUFDQSxJQUFBLENBQUssT0FBTyxDQUFDLENBQUEsR0FBRSxDQUFBLEdBQUUsQ0FBTCxDQUFaLEVBQXFCLENBQUEsR0FBRSxDQUFBLEdBQUUsQ0FBekIsRUFBMkIsUUFBM0IsRUFBb0MsTUFBcEM7TUFDQSxHQUFBLENBQUE7SUFKRDtFQUREO1NBTUEsR0FBQSxDQUFBO0FBeERhOztBQTBEZCxNQUFNLENBQUMsWUFBUCxHQUFzQixRQUFBLENBQUEsQ0FBQTtBQUN0QixNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUEsQ0FBQSxFQUFBO0VBQUMsSUFBRyxPQUFIO0FBQWdCLFdBQWhCOztFQUNBLE9BQUEsR0FBVTtFQUNWLElBQUcsUUFBSDtJQUNDLFVBQUEsQ0FBQTtBQUNBLFdBRkQ7O0FBR0E7QUFBQTtFQUFBLEtBQUEscUNBQUE7O0lBQ0MsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBLEdBQVEsT0FBTyxDQUFDLENBQUQ7SUFDZixJQUFHLENBQUEsQ0FBQSxHQUFJLE1BQUosSUFBSSxNQUFKLEdBQWEsQ0FBQSxHQUFFLElBQWYsQ0FBQSxJQUF3QixDQUFBLENBQUEsR0FBSSxNQUFKLElBQUksTUFBSixHQUFhLENBQUEsR0FBRSxJQUFmLENBQTNCO01BQ0MsTUFBQSxHQUFTO01BQ1QsSUFBRyxRQUFBLEtBQVksTUFBZjtRQUNDLE9BQUEsSUFBVztxQkFDWCxVQUFBLENBQUEsR0FGRDtPQUFBLE1BQUE7UUFJQyxLQUFBLElBQVM7cUJBQ1QsUUFBQSxHQUFXLE1BTFo7T0FGRDtLQUFBLE1BQUE7MkJBQUE7O0VBRkQsQ0FBQTs7QUFOcUI7O0FBaUJ0QixNQUFNLENBQUMsYUFBUCxHQUF1QixRQUFBLENBQUEsQ0FBQTtTQUFHLE9BQUEsR0FBVTtBQUFiOztBQUV2QixZQUFBLEdBQWUsUUFBQSxDQUFBLENBQUE7QUFFZixNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBO0VBQUMsTUFBQSxHQUFTO0FBQ1Q7RUFBQSxLQUFBLHFDQUFBOztBQUNDO0lBQUEsS0FBQSx3Q0FBQTs7TUFDQyxNQUFNLENBQUMsSUFBUCxDQUFZLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBWjtJQUREO0VBREQ7RUFJQSxHQUFBLEdBQU0sUUFBQSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxDQUFBO0FBQ1AsUUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBO0lBQUUsQ0FBQSxHQUFJLE1BQU0sQ0FBQyxDQUFEO0lBQ1YsQ0FBQSxHQUFJLE1BQU0sQ0FBQyxDQUFEO0lBQ1YsQ0FBQSxHQUFJLE1BQU0sQ0FBQyxDQUFEO1dBQ1YsUUFBQSxDQUFTLENBQUMsQ0FBQyxDQUFELENBQVYsRUFBYyxDQUFDLENBQUMsQ0FBRCxDQUFmLEVBQW1CLENBQUMsQ0FBQyxDQUFELENBQXBCLEVBQXdCLENBQUMsQ0FBQyxDQUFELENBQXpCLEVBQTZCLENBQUMsQ0FBQyxDQUFELENBQTlCLEVBQWtDLENBQUMsQ0FBQyxDQUFELENBQW5DO0VBSks7RUFNTixRQUFRLENBQUMsSUFBVCxDQUFjO0lBQ2IsUUFBQSxDQUFBLENBQUE7YUFBRyxNQUFBLENBQU8sR0FBQSxHQUFJLElBQVg7SUFBZ0IsR0FBQSxHQUFJLElBQXBCO0lBQXlCLEdBQUEsR0FBSSxJQUE3QjtJQUFILENBRGE7SUFFYixRQUFBLENBQUEsQ0FBQTthQUFHLE1BQUEsQ0FBTyxHQUFBLEdBQUksSUFBWDtJQUFnQixHQUFBLEdBQUksSUFBcEI7SUFBeUIsR0FBQSxHQUFJLElBQTdCO0lBQUgsQ0FGYTtJQUdiLFFBQUEsQ0FBQSxDQUFBO2FBQUcsTUFBQSxDQUFPLEdBQUEsR0FBSSxJQUFYO0lBQWdCLEdBQUEsR0FBSSxJQUFwQjtJQUF5QixHQUFBLEdBQUksSUFBN0I7SUFBSCxDQUhhO0lBSWIsUUFBQSxDQUFBLENBQUE7YUFBRyxNQUFBLENBQU8sR0FBQSxHQUFJLElBQVg7SUFBZ0IsR0FBQSxHQUFJLElBQXBCO0lBQXlCLEdBQUEsR0FBSSxJQUE3QjtJQUFILENBSmE7SUFLYixRQUFBLENBQUEsQ0FBQTthQUFHLE1BQUEsQ0FBTyxHQUFBLEdBQUksSUFBWDtJQUFnQixHQUFBLEdBQUksSUFBcEI7SUFBeUIsR0FBQSxHQUFJLElBQTdCO0lBQUgsQ0FMYTtHQUFkO0VBUUEsUUFBUSxDQUFDLElBQVQsQ0FBYztJQUNiLFFBQUEsQ0FBQSxDQUFBO2FBQUcsR0FBQSxDQUFJLENBQUo7SUFBTSxDQUFOO0lBQVEsQ0FBUjtJQUFILENBRGE7SUFFYixRQUFBLENBQUEsQ0FBQTthQUFHLEdBQUEsQ0FBSSxDQUFKO0lBQU0sQ0FBTjtJQUFRLENBQVI7SUFBSCxDQUZhO0lBR2IsUUFBQSxDQUFBLENBQUE7YUFBRyxHQUFBLENBQUksQ0FBSjtJQUFNLENBQU47SUFBUSxDQUFSO0lBQUgsQ0FIYTtJQUliLFFBQUEsQ0FBQSxDQUFBO2FBQUcsR0FBQSxDQUFJLENBQUo7SUFBTSxDQUFOO0lBQVEsQ0FBUjtJQUFILENBSmE7SUFLYixRQUFBLENBQUEsQ0FBQTthQUFHLEdBQUEsQ0FBSSxDQUFKO0lBQU0sQ0FBTjtJQUFRLENBQVI7SUFBSCxDQUxhO0lBTWIsUUFBQSxDQUFBLENBQUE7YUFBRyxHQUFBLENBQUksQ0FBSjtJQUFNLENBQU47SUFBUSxDQUFSO0lBQUgsQ0FOYTtJQU9iLFFBQUEsQ0FBQSxDQUFBO2FBQUcsR0FBQSxDQUFJLENBQUo7SUFBTSxDQUFOO0lBQVEsQ0FBUjtJQUFILENBUGE7SUFRYixRQUFBLENBQUEsQ0FBQTthQUFHLEdBQUEsQ0FBSSxDQUFKO0lBQU0sQ0FBTjtJQUFRLENBQVI7SUFBSCxDQVJhO0dBQWQ7U0FXQSxRQUFRLENBQUMsSUFBVCxDQUFjO0lBQ2IsUUFBQSxDQUFBLENBQUE7YUFBRyxNQUFBLENBQU8sR0FBQSxHQUFJLElBQVg7SUFBZ0IsR0FBQSxHQUFJLElBQXBCO0lBQXlCLENBQXpCO0lBQUgsQ0FEYTtJQUViLFFBQUEsQ0FBQSxDQUFBO2FBQUcsTUFBQSxDQUFPLElBQUEsR0FBSyxJQUFaO0lBQWlCLEdBQUEsR0FBSSxJQUFyQjtJQUEwQixDQUExQjtJQUFILENBRmE7SUFHYixRQUFBLENBQUEsQ0FBQTthQUFHLE1BQUEsQ0FBTyxHQUFBLEdBQUksSUFBWDtJQUFnQixHQUFBLEdBQUksSUFBcEI7SUFBeUIsQ0FBekI7SUFBSCxDQUhhO0lBSWIsUUFBQSxDQUFBLENBQUE7YUFBRyxNQUFBLENBQU8sR0FBQSxHQUFJLElBQVg7SUFBZ0IsR0FBQSxHQUFJLElBQXBCO0lBQXlCLENBQXpCO0lBQUgsQ0FKYTtJQU1iLFFBQUEsQ0FBQSxDQUFBO2FBQUcsSUFBQSxDQUFLLEdBQUEsR0FBSSxJQUFUO0lBQWMsR0FBQSxHQUFJLElBQWxCO0lBQXVCLEdBQUEsR0FBSSxJQUEzQjtJQUFnQyxHQUFBLEdBQUksSUFBcEM7SUFBSCxDQU5hO0lBT2IsUUFBQSxDQUFBLENBQUE7YUFBRyxJQUFBLENBQUssR0FBQSxHQUFJLElBQVQ7SUFBYyxHQUFBLEdBQUksSUFBbEI7SUFBdUIsR0FBQSxHQUFJLElBQTNCO0lBQWdDLEdBQUEsR0FBSSxJQUFwQztJQUFILENBUGE7SUFRYixRQUFBLENBQUEsQ0FBQTthQUFHLElBQUEsQ0FBSyxHQUFBLEdBQUksSUFBVDtJQUFjLEdBQUEsR0FBSSxJQUFsQjtJQUF1QixHQUFBLEdBQUksSUFBM0I7SUFBZ0MsR0FBQSxHQUFJLElBQXBDO0lBQUgsQ0FSYTtJQVNiLFFBQUEsQ0FBQSxDQUFBO2FBQUcsSUFBQSxDQUFLLEdBQUEsR0FBSSxJQUFUO0lBQWMsR0FBQSxHQUFJLElBQWxCO0lBQXVCLEdBQUEsR0FBSSxJQUEzQjtJQUFnQyxHQUFBLEdBQUksSUFBcEM7SUFBSCxDQVRhO0lBV2IsUUFBQSxDQUFBLENBQUE7TUFBRyxNQUFBLENBQUE7YUFBVSxHQUFBLENBQUksR0FBQSxHQUFJLElBQVI7SUFBYyxHQUFBLEdBQUksSUFBbEI7SUFBd0IsR0FBQSxHQUFJLElBQTVCO0lBQWtDLEdBQUEsR0FBSSxJQUF0QztJQUE0QyxDQUFBLEdBQUksT0FBaEQ7SUFBeUQsQ0FBQSxHQUFJLE9BQTdEO0lBQWIsQ0FYYTtJQVliLFFBQUEsQ0FBQSxDQUFBO01BQUcsTUFBQSxDQUFBO2FBQVUsR0FBQSxDQUFJLEdBQUEsR0FBSSxJQUFSO0lBQWMsR0FBQSxHQUFJLElBQWxCO0lBQXdCLEdBQUEsR0FBSSxJQUE1QjtJQUFrQyxHQUFBLEdBQUksSUFBdEM7SUFBNEMsQ0FBQSxHQUFJLE9BQWhEO0lBQXlELENBQUEsR0FBSSxPQUE3RDtJQUFiLENBWmE7SUFhYixRQUFBLENBQUEsQ0FBQTtNQUFHLE1BQUEsQ0FBQTthQUFVLEdBQUEsQ0FBSSxHQUFBLEdBQUksSUFBUjtJQUFjLEdBQUEsR0FBSSxJQUFsQjtJQUF3QixHQUFBLEdBQUksSUFBNUI7SUFBa0MsR0FBQSxHQUFJLElBQXRDO0lBQTRDLENBQUEsR0FBSSxPQUFoRDtJQUF5RCxDQUFBLEdBQUksT0FBN0Q7SUFBYixDQWJhO0lBY2IsUUFBQSxDQUFBLENBQUE7TUFBRyxNQUFBLENBQUE7YUFBVSxHQUFBLENBQUksR0FBQSxHQUFJLElBQVI7SUFBYyxHQUFBLEdBQUksSUFBbEI7SUFBd0IsR0FBQSxHQUFJLElBQTVCO0lBQWtDLEdBQUEsR0FBSSxJQUF0QztJQUE0QyxDQUFBLEdBQUksT0FBaEQ7SUFBeUQsQ0FBQSxHQUFJLE9BQTdEO0lBQWIsQ0FkYTtHQUFkO0FBaENjIiwic291cmNlc0NvbnRlbnQiOlsicmFuZ2UgPSBfLnJhbmdlXHJcbmVjaG8gPSBjb25zb2xlLmxvZ1xyXG5wcmVzc2VkID0gZmFsc2VcclxuXHJcbnN0YXJ0ID0gbmV3IERhdGUoKVxyXG5cclxubGFuZHNjYXBlID0gdHJ1ZVxyXG5cclxuYmcgPSAnZ3JleSdcclxuXHJcbmFiY2QgPSBbXVxyXG5maWd1cmVzID0gW11cclxuYW5zd2VycyA9IFtdXHJcblxyXG5jb3JyZWN0ID0gMFxyXG53cm9uZyA9IDBcclxuXHJcbmV4cGVjdGVkID0gLTFcclxuYWN0dWFsID0gLTFcclxuZmVlZGJhY2sgPSBmYWxzZVxyXG5cclxucHJvYmxlbXMgPSBbXVxyXG5uciA9IC0xXHJcbnVuaXQgPSAwIFxyXG5cclxubmV3UHJvYmxlbSA9IC0+XHJcblx0ZmVlZGJhY2sgPSBmYWxzZVxyXG5cdGV4cGVjdGVkID0gLTFcclxuXHRhY3R1YWwgPSAtMVxyXG5cdG5yID0gKG5yKzEpICUgcHJvYmxlbXMubGVuZ3RoXHJcblx0b2RkID0gXy5zYW1wbGUgW2ZhbHNlLHRydWVdXHJcblx0biA9IHByb2JsZW1zW25yXS5sZW5ndGggIyA1LDEyIGVsbGVyIDhcclxuXHR3aGlsZSB0cnVlXHJcblx0XHRmaWd1cmVzID0gXy5zYW1wbGVTaXplIHJhbmdlKDEgPDwgbiksIDlcclxuXHJcblx0XHRhYmNkID0gWzAsMCwwLDAsMCwwLDAsMCwwXVxyXG5cdFx0YWJjZFswXSA9IGZpZ3VyZXNbMF1cclxuXHRcdGFiY2RbMV0gPSBmaWd1cmVzWzFdXHJcblx0XHRhYmNkWzNdID0gZmlndXJlc1syXVxyXG5cdFx0YWJjZFs0XSA9IGZpZ3VyZXNbM11cclxuXHJcblx0XHR4ID0gaWYgb2RkIHRoZW4gMiAqKiBuIC0gMSBlbHNlIDBcclxuXHJcblx0XHRhYmNkWzJdID0gYWJjZFswXSBeIGFiY2RbMV0gXiB4XHJcblx0XHRhYmNkWzVdID0gYWJjZFszXSBeIGFiY2RbNF0gXiB4XHJcblx0XHRhYmNkWzZdID0gYWJjZFswXSBeIGFiY2RbM10gXiB4XHJcblx0XHRhYmNkWzddID0gYWJjZFsxXSBeIGFiY2RbNF0gXiB4XHJcblx0XHRhYmNkWzhdID0gYWJjZFsyXSBeIGFiY2RbNV0gXiB4ICMgdGhlIHNlY3JldCBxdWVzdGlvbm1hcmtcclxuXHJcblx0XHRhbnN3ZXJzID0gW11cclxuXHRcdGFuc3dlcnMucHVzaCBmaWd1cmVzWzRdXHJcblx0XHRhbnN3ZXJzLnB1c2ggZmlndXJlc1s1XVxyXG5cdFx0YW5zd2Vycy5wdXNoIGZpZ3VyZXNbNl1cclxuXHRcdGFuc3dlcnMucHVzaCBmaWd1cmVzWzddXHJcblx0XHRhbnN3ZXJzLnB1c2ggZmlndXJlc1s4XVxyXG5cdFx0YW5zd2Vycy5wdXNoIGFiY2RbOF1cclxuXHJcblx0XHRhbnN3ZXJzID0gXy51bmlxIGFuc3dlcnNcclxuXHRcdGFuc3dlcnMgPSBfLnNodWZmbGUgYW5zd2Vyc1xyXG5cdFx0XHJcblx0XHRleHBlY3RlZCA9IGFuc3dlcnMuaW5kZXhPZiBhYmNkWzhdXHJcblx0XHRpZiBhbnN3ZXJzLmxlbmd0aCA9PSA2IHRoZW4gYnJlYWtcclxuXHJcbmJ1dHRvbnMgPSBbXVxyXG5cclxuc2hvdyA9IChwYXR0ZXJuLGk9LTEsZXhwZWN0ZWQsYWN0dWFsKSAtPlxyXG5cdHN0cm9rZSAnYmxhY2snXHJcblx0aWYgYWN0dWFsID09IC0xIHRoZW4gZmlsbCAnd2hpdGUnXHJcblx0ZWxzZSBpZiBleHBlY3RlZCA9PSBpXHJcblx0XHRmaWxsICdncmVlbidcclxuXHRcdHJlY3QgMCwwLHVuaXQsdW5pdFxyXG5cdGVsc2UgaWYgYWN0dWFsID09IGlcclxuXHRcdGZpbGwgJ3JlZCdcclxuXHRcdHJlY3QgMCwwLHVuaXQsdW5pdFxyXG5cclxuXHRzdHJva2VXZWlnaHQgaWYgbnI9PTEgdGhlbiAxIGVsc2UgMC4wMyAqIHVuaXRcclxuXHRzdHJva2UgJ3doaXRlJ1xyXG5cdGZpbGwgJ3doaXRlJ1xyXG5cclxuXHRmb3IgaXggaW4gcmFuZ2UgcHJvYmxlbXNbbnJdLmxlbmd0aFxyXG5cdFx0aWYgcGF0dGVybiAmICgxIDw8IGl4KSB0aGVuIHByb2JsZW1zW25yXVtpeF0oKVxyXG5cclxud2luZG93LnNldHVwID0gLT5cclxuXHRjcmVhdGVDYW52YXMgaW5uZXJXaWR0aC01LGlubmVySGVpZ2h0LTVcclxuXHR1bml0ID0gd2lkdGgvNy41XHJcblxyXG5cdGZvciBqIGluIFsxKnVuaXQsMip1bml0XVxyXG5cdFx0Zm9yIGkgaW4gWzQqdW5pdCw1KnVuaXQsNip1bml0XVxyXG5cdFx0XHRidXR0b25zLnB1c2ggW2ksal1cclxuXHRtYWtlUHJvYmxlbXMoKVxyXG5cdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0dGV4dFNpemUgMC41ICogdW5pdFxyXG5cdG5ld1Byb2JsZW0oKVxyXG5cclxud2luZG93LmRyYXcgPSAtPlxyXG5cdGJhY2tncm91bmQgJ2dyZXknXHJcblx0c3Ryb2tlICdibGFjaydcclxuXHRzdHJva2VXZWlnaHQgMC4wMyAqIHVuaXRcclxuXHJcblx0IyBSaXRhIDR4NCBsaW5qZXJcclxuXHR4cyA9IFswLjUqdW5pdCwxLjUqdW5pdCwyLjUqdW5pdCwzLjUqdW5pdF1cclxuXHR5cyA9IFsxLjUqdW5pdCwyLjUqdW5pdCwzLjUqdW5pdF1cclxuXHRmb3IgaSBpbiByYW5nZSA0XHJcblx0XHRsaW5lIHhzWzBdLHhzW2ldLHhzWzNdLHhzW2ldXHJcblx0XHRsaW5lIHhzW2ldLHhzWzBdLHhzW2ldLHhzWzNdXHJcblxyXG5cdHN0cm9rZSAnd2hpdGUnXHJcblxyXG5cdCMgUml0YSAzeDMgcHJvYmxlbVxyXG5cdGZvciBpIGluIHJhbmdlIDNcclxuXHRcdGZvciBqIGluIHJhbmdlIDNcclxuXHRcdFx0cHVzaCgpXHJcblx0XHRcdHRyYW5zbGF0ZSAoaSswLjUpKnVuaXQsKGorMC41KSp1bml0XHJcblx0XHRcdGlmIGk9PTIgYW5kIGo9PTJcclxuXHRcdFx0XHRmaWxsICd3aGl0ZSdcclxuXHRcdFx0XHR0ZXh0U2l6ZSB1bml0XHJcblx0XHRcdFx0dGV4dCAnPycsdW5pdC8yLDAuNTUgKiB1bml0XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRub1N0cm9rZSgpXHJcblx0XHRcdFx0c2hvdyBhYmNkW2krMypqXSwtMSwtMSwtMVxyXG5cdFx0XHRwb3AoKVxyXG5cdFxyXG5cdG5vU3Ryb2tlKClcclxuXHRmaWxsICd5ZWxsb3cnXHJcblx0dGV4dCBcIiN7Y29ycmVjdH0gb2YgI3tjb3JyZWN0K3dyb25nfVwiLDUuNSp1bml0LDAuNyp1bml0XHJcblx0dGV4dCByb3VuZCgobmV3IERhdGUoKS1zdGFydCkvMTAwMCkrXCJzXCIsIDUuNSp1bml0LDMuMyp1bml0XHJcblx0ZmlsbCAnd2hpdGUnXHJcblxyXG5cdCMgQW5zd2Vyc1xyXG5cdHB1c2goKVxyXG5cdHRyYW5zbGF0ZSAzLjUqdW5pdCwwXHJcblxyXG5cdCMgUml0YSAzeDQgbGluamVyXHJcblx0c3Ryb2tlICdibGFjaydcclxuXHRzdHJva2VXZWlnaHQgMC4wMyAqIHVuaXRcclxuXHR4cyA9IFswLjUqdW5pdCwxLjUqdW5pdCwyLjUqdW5pdCwzLjUqdW5pdF1cclxuXHR5cyA9IFsxLjAqdW5pdCwyLjAqdW5pdCwzLjAqdW5pdF1cclxuXHRmb3IgaSBpbiByYW5nZSA0XHJcblx0XHRsaW5lIHhzW2ldLHlzWzBdLHhzW2ldLHlzWzJdXHJcblx0Zm9yIGkgaW4gcmFuZ2UgM1xyXG5cdFx0bGluZSB4c1swXSx5c1tpXSx4c1szXSx5c1tpXVxyXG5cclxuXHQjIFJpdGEgM3gyIHN2YXJcclxuXHRzdHJva2UgJ3doaXRlJ1xyXG5cdGZvciBpIGluIHJhbmdlIDNcclxuXHRcdGZvciBqIGluIHJhbmdlIDJcclxuXHRcdFx0cHVzaCgpXHJcblx0XHRcdHRyYW5zbGF0ZSB4c1tpXSwgeXNbal0gXHJcblx0XHRcdHNob3cgYW5zd2Vyc1tpKzMqal0sIGkrMypqLGV4cGVjdGVkLGFjdHVhbFxyXG5cdFx0XHRwb3AoKVxyXG5cdHBvcCgpXHJcblxyXG53aW5kb3cubW91c2VQcmVzc2VkID0gLT5cclxuXHRpZiBwcmVzc2VkIHRoZW4gcmV0dXJuXHJcblx0cHJlc3NlZCA9IHRydWVcclxuXHRpZiBmZWVkYmFja1xyXG5cdFx0bmV3UHJvYmxlbSgpXHJcblx0XHRyZXR1cm5cclxuXHRmb3IgaSBpbiByYW5nZSBidXR0b25zLmxlbmd0aFxyXG5cdFx0W3gseV0gPSBidXR0b25zW2ldXHJcblx0XHRpZiB4IDwgbW91c2VYIDwgeCt1bml0IGFuZCB5IDwgbW91c2VZIDwgeSt1bml0XHJcblx0XHRcdGFjdHVhbCA9IGlcclxuXHRcdFx0aWYgZXhwZWN0ZWQgPT0gYWN0dWFsXHJcblx0XHRcdFx0Y29ycmVjdCArPSAxXHJcblx0XHRcdFx0bmV3UHJvYmxlbSgpXHJcblx0XHRcdGVsc2UgXHJcblx0XHRcdFx0d3JvbmcgKz0gMVxyXG5cdFx0XHRcdGZlZWRiYWNrID0gdHJ1ZVxyXG5cclxud2luZG93Lm1vdXNlUmVsZWFzZWQgPSAtPiBwcmVzc2VkID0gZmFsc2UgXHJcblxyXG5tYWtlUHJvYmxlbXMgPSAtPlxyXG5cclxuXHRwb2ludHMgPSBbXVxyXG5cdGZvciBpIGluIFswLjEqdW5pdCwwLjUqdW5pdCwwLjkqdW5pdF1cclxuXHRcdGZvciBqIGluIFswLjEqdW5pdCwwLjUqdW5pdCwwLjkqdW5pdF1cclxuXHRcdFx0cG9pbnRzLnB1c2ggW2osaV1cclxuXHJcblx0dHJpID0gKGksaixrKSAtPlxyXG5cdFx0YSA9IHBvaW50c1tpXVxyXG5cdFx0YiA9IHBvaW50c1tqXVxyXG5cdFx0YyA9IHBvaW50c1trXVxyXG5cdFx0dHJpYW5nbGUgYVswXSxhWzFdLGJbMF0sYlsxXSxjWzBdLGNbMV1cclxuXHJcblx0cHJvYmxlbXMucHVzaCBbXHJcblx0XHQtPiBjaXJjbGUgMC41KnVuaXQsMC41KnVuaXQsMC41KnVuaXRcclxuXHRcdC0+IGNpcmNsZSAwLjMqdW5pdCwwLjcqdW5pdCwwLjUqdW5pdFxyXG5cdFx0LT4gY2lyY2xlIDAuNyp1bml0LDAuMyp1bml0LDAuNSp1bml0XHJcblx0XHQtPiBjaXJjbGUgMC4zKnVuaXQsMC4zKnVuaXQsMC41KnVuaXRcclxuXHRcdC0+IGNpcmNsZSAwLjcqdW5pdCwwLjcqdW5pdCwwLjUqdW5pdFxyXG5cdF1cclxuXHJcblx0cHJvYmxlbXMucHVzaCBbXHJcblx0XHQtPiB0cmkgMCwzLDRcclxuXHRcdC0+IHRyaSAwLDEsNFxyXG5cdFx0LT4gdHJpIDEsMiw0XHJcblx0XHQtPiB0cmkgMiw0LDVcclxuXHRcdC0+IHRyaSA0LDUsOFxyXG5cdFx0LT4gdHJpIDQsNyw4XHJcblx0XHQtPiB0cmkgNCw2LDdcclxuXHRcdC0+IHRyaSAzLDQsNlxyXG5cdF1cclxuXHJcblx0cHJvYmxlbXMucHVzaCBbXHJcblx0XHQtPiBjaXJjbGUgMC41KnVuaXQsMC4zKnVuaXQsOVxyXG5cdFx0LT4gY2lyY2xlIDAuMjUqdW5pdCwwLjUqdW5pdCw5XHJcblx0XHQtPiBjaXJjbGUgMC43KnVuaXQsMC41KnVuaXQsOVxyXG5cdFx0LT4gY2lyY2xlIDAuNSp1bml0LDAuNyp1bml0LDlcclxuXHJcblx0XHQtPiBsaW5lIDAuMSp1bml0LDAuNSp1bml0LDAuNSp1bml0LDAuNSp1bml0XHJcblx0XHQtPiBsaW5lIDAuNSp1bml0LDAuNSp1bml0LDAuOSp1bml0LDAuNSp1bml0XHJcblx0XHQtPiBsaW5lIDAuNSp1bml0LDAuMSp1bml0LDAuNSp1bml0LDAuNSp1bml0XHJcblx0XHQtPiBsaW5lIDAuNSp1bml0LDAuNSp1bml0LDAuNSp1bml0LDAuOSp1bml0XHJcblxyXG5cdFx0LT4gbm9GaWxsKCk7IGFyYyAwLjUqdW5pdCwgMC41KnVuaXQsIDAuOCp1bml0LCAwLjgqdW5pdCwgMCAqIEhBTEZfUEksIDEgKiBIQUxGX1BJXHJcblx0XHQtPiBub0ZpbGwoKTsgYXJjIDAuNSp1bml0LCAwLjUqdW5pdCwgMC44KnVuaXQsIDAuOCp1bml0LCAxICogSEFMRl9QSSwgMiAqIEhBTEZfUElcclxuXHRcdC0+IG5vRmlsbCgpOyBhcmMgMC41KnVuaXQsIDAuNSp1bml0LCAwLjgqdW5pdCwgMC44KnVuaXQsIDIgKiBIQUxGX1BJLCAzICogSEFMRl9QSVxyXG5cdFx0LT4gbm9GaWxsKCk7IGFyYyAwLjUqdW5pdCwgMC41KnVuaXQsIDAuOCp1bml0LCAwLjgqdW5pdCwgMyAqIEhBTEZfUEksIDQgKiBIQUxGX1BJXHJcblx0XVxyXG4iXX0=
//# sourceURL=c:\github\2024\036-IQ-generator\sketch.coffee