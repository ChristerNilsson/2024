// Generated by CoffeeScript 2.7.0
var abcd, answers, bg, buttons, correct, draw, echo, facit, figures, makeProblems, newProblem, nr, pressed, problems, range, show, start, unit, wrong;

range = _.range;

echo = console.log;

pressed = false;

start = new Date();

bg = 'green';

abcd = [];

figures = [];

answers = [];

facit = 0;

correct = 0;

wrong = 0;

problems = [];

nr = 0;

unit = 0;

newProblem = function() {
  nr = (nr + 1) % problems.length;
  while (true) {
    figures = _.sampleSize(range(1 << problems[nr].length), 9);
    abcd = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    abcd[0] = figures[0];
    abcd[1] = figures[1];
    abcd[3] = figures[2];
    abcd[4] = figures[3];
    abcd[2] = abcd[0] ^ abcd[1];
    abcd[5] = abcd[3] ^ abcd[4];
    abcd[6] = abcd[0] ^ abcd[3];
    abcd[7] = abcd[1] ^ abcd[4];
    abcd[8] = abcd[2] ^ abcd[5];
    answers = [];
    answers.push(figures[4]);
    answers.push(figures[5]);
    answers.push(figures[6]);
    answers.push(figures[7]);
    answers.push(figures[8]);
    answers.push(abcd[8]);
    answers = _.uniq(answers);
    answers = _.shuffle(answers);
    facit = answers.indexOf(abcd[8]);
    if (answers.length === 6) {
      break;
    }
  }
  return draw();
};

buttons = [];

show = function(pattern) {
  var ix, l, len, ref, results;
  fill('white');
  if (nr === 0) {
    strokeWeight(3);
  } else {
    strokeWeight(1);
  }
  ref = range(problems[nr].length);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    ix = ref[l];
    if (pattern & (1 << ix)) {
      results.push(problems[nr][ix]());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

window.setup = function() {
  var i, j, l, len, len1, m, ref, ref1;
  createCanvas(innerWidth - 5, innerHeight - 5);
  unit = height / 6.5;
  ref = [3.7 * unit, 4.7 * unit];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    ref1 = [0.5 * unit, 1.5 * unit, 2.5 * unit];
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      j = ref1[m];
      buttons.push([j, i]);
    }
  }
  makeProblems();
  textAlign(CENTER, CENTER);
  textSize(48);
  return newProblem();
};

draw = function() {
  var i, j, l, len, len1, len2, len3, len4, len5, len6, m, n, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, xs, ys;
  background(bg);
  stroke('black');
  xs = [0.5 * unit, 1.5 * unit, 2.5 * unit, 3.5 * unit];
  ys = [1.5 * unit, 2.5 * unit, 3.5 * unit];
  ref = range(4);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    line(xs[0], xs[i], xs[3], xs[i]);
    line(xs[i], xs[0], xs[i], xs[3]);
  }
  stroke('white');
  ref1 = range(3);
  for (m = 0, len1 = ref1.length; m < len1; m++) {
    i = ref1[m];
    ref2 = range(3);
    for (n = 0, len2 = ref2.length; n < len2; n++) {
      j = ref2[n];
      push();
      translate((i + 0.5) * unit, (j + 0.5) * unit);
      if (i === 2 && j === 2) {
        stroke('black');
        text('?', unit / 2, unit / 2);
      } else {
        show(abcd[3 * i + j]);
      }
      pop();
    }
  }
  noStroke();
  fill('yellow');
  text(`${correct} of ${correct + wrong}`, 2 * unit, 0.3 * unit);
  text(round((new Date() - start) / 1000, 1) + "s", 2 * unit, 3.8 * unit);
  fill('white');
  push();
  translate(0, 2.5 * unit);
  stroke('black');
  ref3 = range(3);
  for (o = 0, len3 = ref3.length; o < len3; o++) {
    i = ref3[o];
    line(xs[0], ys[i], xs[3], ys[i]);
  }
  ref4 = range(4);
  for (p = 0, len4 = ref4.length; p < len4; p++) {
    i = ref4[p];
    line(xs[i], ys[0], xs[i], ys[2]);
  }
  stroke('white');
  ref5 = range(3);
  for (q = 0, len5 = ref5.length; q < len5; q++) {
    i = ref5[q];
    ref6 = range(2);
    for (r = 0, len6 = ref6.length; r < len6; r++) {
      j = ref6[r];
      push();
      translate(xs[i], ys[j]);
      show(answers[i + 3 * j]);
      pop();
    }
  }
  return pop();
};

window.mousePressed = function() {
  var i, l, len, ref, results, x, y;
  if (pressed) {
    return;
  }
  pressed = true;
  ref = range(buttons.length);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    [x, y] = buttons[i];
    if ((x < mouseX && mouseX < x + unit) && (y < mouseY && mouseY < y + unit)) {
      if (facit === i) {
        bg = 'green';
        correct += 1;
      } else {
        bg = 'red';
        wrong += 1;
      }
      results.push(newProblem());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

window.mouseReleased = function() {
  return pressed = false;
};

makeProblems = function() {
  var i, j, l, len, len1, m, points, ref, ref1, tri;
  points = [];
  ref = [0.1 * unit, 0.5 * unit, 0.9 * unit];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    ref1 = [0.1 * unit, 0.5 * unit, 0.9 * unit];
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      j = ref1[m];
      points.push([j, i]);
    }
  }
  tri = function(i, j, k) {
    var a, b, c;
    a = points[i];
    b = points[j];
    c = points[k];
    return triangle(a[0], a[1], b[0], b[1], c[0], c[1]);
  };
  problems.push([
    function() {
      return circle(0.5 * unit,
    0.3 * unit,
    5);
    },
    function() {
      return circle(0.25 * unit,
    0.5 * unit,
    5);
    },
    function() {
      return circle(0.7 * unit,
    0.5 * unit,
    5);
    },
    function() {
      return circle(0.5 * unit,
    0.7 * unit,
    5);
    },
    function() {
      return line(0.1 * unit,
    0.5 * unit,
    0.5 * unit,
    0.5 * unit);
    },
    function() {
      return line(0.5 * unit,
    0.5 * unit,
    0.9 * unit,
    0.5 * unit);
    },
    function() {
      return line(0.5 * unit,
    0.1 * unit,
    0.5 * unit,
    0.5 * unit);
    },
    function() {
      return line(0.5 * unit,
    0.5 * unit,
    0.5 * unit,
    0.9 * unit);
    },
    function() {
      noFill();
      return arc(0.5 * unit,
    0.5 * unit,
    0.8 * unit,
    0.8 * unit,
    0 * HALF_PI,
    1 * HALF_PI);
    },
    function() {
      noFill();
      return arc(0.5 * unit,
    0.5 * unit,
    0.8 * unit,
    0.8 * unit,
    1 * HALF_PI,
    2 * HALF_PI);
    },
    function() {
      noFill();
      return arc(0.5 * unit,
    0.5 * unit,
    0.8 * unit,
    0.8 * unit,
    2 * HALF_PI,
    3 * HALF_PI);
    },
    function() {
      noFill();
      return arc(0.5 * unit,
    0.5 * unit,
    0.8 * unit,
    0.8 * unit,
    3 * HALF_PI,
    4 * HALF_PI);
    }
  ]);
  problems.push([
    function() {
      return tri(0,
    3,
    4);
    },
    function() {
      return tri(0,
    1,
    4);
    },
    function() {
      return tri(1,
    2,
    4);
    },
    function() {
      return tri(2,
    4,
    5);
    },
    function() {
      return tri(4,
    5,
    8);
    },
    function() {
      return tri(4,
    7,
    8);
    },
    function() {
      return tri(4,
    6,
    7);
    },
    function() {
      return tri(3,
    4,
    6);
    }
  ]);
  return problems.push([
    function() {
      return circle(0.5 * unit,
    0.5 * unit,
    0.5 * unit);
    },
    function() {
      return circle(0.3 * unit,
    0.7 * unit,
    0.5 * unit);
    },
    function() {
      return circle(0.7 * unit,
    0.3 * unit,
    0.5 * unit);
    },
    function() {
      return circle(0.3 * unit,
    0.3 * unit,
    0.5 * unit);
    },
    function() {
      return circle(0.7 * unit,
    0.7 * unit,
    0.5 * unit);
    }
  ]);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2024\036-IQ-generator\sketch.coffee