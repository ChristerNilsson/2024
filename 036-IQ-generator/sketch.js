// Generated by CoffeeScript 2.7.0
var abcd, answers, bg, buttons, correct, draw, echo, facit, figures, makeProblems, newProblem, nr, pressed, problems, range, show, start, unit, wrong;

range = _.range;

echo = console.log;

pressed = false;

start = new Date();

bg = 'green';

abcd = [];

figures = [];

answers = [];

facit = 0;

correct = 0;

wrong = 0;

problems = [];

nr = -1;

unit = 0;

newProblem = function() {
  var n, odd, x;
  nr = (nr + 1) % problems.length;
  odd = _.sample([false, true]);
  n = problems[nr].length; // 5,12 eller 8
  while (true) {
    figures = _.sampleSize(range(1 << n), 9);
    abcd = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    abcd[0] = figures[0];
    abcd[1] = figures[1];
    abcd[3] = figures[2];
    abcd[4] = figures[3];
    x = odd ? 2 ** n - 1 : 0;
    echo(x);
    abcd[2] = abcd[0] ^ abcd[1] ^ x;
    abcd[5] = abcd[3] ^ abcd[4] ^ x;
    abcd[6] = abcd[0] ^ abcd[3] ^ x;
    abcd[7] = abcd[1] ^ abcd[4] ^ x;
    abcd[8] = abcd[2] ^ abcd[5] ^ x; // the secret questionmark
    answers = [];
    answers.push(figures[4]);
    answers.push(figures[5]);
    answers.push(figures[6]);
    answers.push(figures[7]);
    answers.push(figures[8]);
    answers.push(abcd[8]);
    answers = _.uniq(answers);
    answers = _.shuffle(answers);
    facit = answers.indexOf(abcd[8]);
    if (answers.length === 6) {
      break;
    }
  }
  return draw();
};

buttons = [];

show = function(pattern) {
  var ix, l, len, ref, results;
  fill('white');
  strokeWeight(nr === 2 ? 7 : 1);
  ref = range(problems[nr].length);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    ix = ref[l];
    if (pattern & (1 << ix)) {
      results.push(problems[nr][ix]());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

window.setup = function() {
  var i, j, l, len, len1, m, ref, ref1;
  createCanvas(innerWidth - 5, innerHeight - 5);
  unit = height / 6.5;
  ref = [3.7 * unit, 4.7 * unit];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    ref1 = [0.5 * unit, 1.5 * unit, 2.5 * unit];
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      j = ref1[m];
      buttons.push([j, i]);
    }
  }
  makeProblems();
  textAlign(CENTER, CENTER);
  textSize(48);
  return newProblem();
};

draw = function() {
  var i, j, l, len, len1, len2, len3, len4, len5, len6, m, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, s, xs, ys;
  background(bg);
  stroke('black');
  xs = [0.5 * unit, 1.5 * unit, 2.5 * unit, 3.5 * unit];
  ys = [1.5 * unit, 2.5 * unit, 3.5 * unit];
  ref = range(4);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    line(xs[0], xs[i], xs[3], xs[i]);
    line(xs[i], xs[0], xs[i], xs[3]);
  }
  stroke('white');
  ref1 = range(3);
  for (m = 0, len1 = ref1.length; m < len1; m++) {
    i = ref1[m];
    ref2 = range(3);
    for (o = 0, len2 = ref2.length; o < len2; o++) {
      j = ref2[o];
      push();
      translate((i + 0.5) * unit, (j + 0.5) * unit);
      if (i === 2 && j === 2) {
        stroke('black');
        text('?', unit / 2, unit / 2);
      } else {
        show(abcd[3 * i + j]);
      }
      pop();
    }
  }
  noStroke();
  fill('yellow');
  text(`${correct} of ${correct + wrong}`, 2 * unit, 0.3 * unit);
  text(round((new Date() - start) / 1000, 1) + "s", 2 * unit, 3.8 * unit);
  fill('white');
  push();
  translate(0, 2.5 * unit);
  stroke('black');
  ref3 = range(3);
  for (p = 0, len3 = ref3.length; p < len3; p++) {
    i = ref3[p];
    line(xs[0], ys[i], xs[3], ys[i]);
  }
  ref4 = range(4);
  for (q = 0, len4 = ref4.length; q < len4; q++) {
    i = ref4[q];
    line(xs[i], ys[0], xs[i], ys[2]);
  }
  stroke('white');
  ref5 = range(3);
  for (r = 0, len5 = ref5.length; r < len5; r++) {
    i = ref5[r];
    ref6 = range(2);
    for (s = 0, len6 = ref6.length; s < len6; s++) {
      j = ref6[s];
      push();
      translate(xs[i], ys[j]);
      show(answers[i + 3 * j]);
      pop();
    }
  }
  return pop();
};

window.mousePressed = function() {
  var i, l, len, ref, results, x, y;
  if (pressed) {
    return;
  }
  pressed = true;
  ref = range(buttons.length);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    [x, y] = buttons[i];
    if ((x < mouseX && mouseX < x + unit) && (y < mouseY && mouseY < y + unit)) {
      if (facit === i) {
        bg = 'green';
        correct += 1;
      } else {
        bg = 'red';
        wrong += 1;
      }
      results.push(newProblem());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

window.mouseReleased = function() {
  return pressed = false;
};

makeProblems = function() {
  var i, j, l, len, len1, m, points, ref, ref1, tri;
  points = [];
  ref = [0.1 * unit, 0.5 * unit, 0.9 * unit];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    ref1 = [0.1 * unit, 0.5 * unit, 0.9 * unit];
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      j = ref1[m];
      points.push([j, i]);
    }
  }
  tri = function(i, j, k) {
    var a, b, c;
    a = points[i];
    b = points[j];
    c = points[k];
    return triangle(a[0], a[1], b[0], b[1], c[0], c[1]);
  };
  problems.push([
    function() {
      return circle(0.5 * unit,
    0.5 * unit,
    0.5 * unit);
    },
    function() {
      return circle(0.3 * unit,
    0.7 * unit,
    0.5 * unit);
    },
    function() {
      return circle(0.7 * unit,
    0.3 * unit,
    0.5 * unit);
    },
    function() {
      return circle(0.3 * unit,
    0.3 * unit,
    0.5 * unit);
    },
    function() {
      return circle(0.7 * unit,
    0.7 * unit,
    0.5 * unit);
    }
  ]);
  problems.push([
    function() {
      return tri(0,
    3,
    4);
    },
    function() {
      return tri(0,
    1,
    4);
    },
    function() {
      return tri(1,
    2,
    4);
    },
    function() {
      return tri(2,
    4,
    5);
    },
    function() {
      return tri(4,
    5,
    8);
    },
    function() {
      return tri(4,
    7,
    8);
    },
    function() {
      return tri(4,
    6,
    7);
    },
    function() {
      return tri(3,
    4,
    6);
    }
  ]);
  return problems.push([
    function() {
      return circle(0.5 * unit,
    0.3 * unit,
    9);
    },
    function() {
      return circle(0.25 * unit,
    0.5 * unit,
    9);
    },
    function() {
      return circle(0.7 * unit,
    0.5 * unit,
    9);
    },
    function() {
      return circle(0.5 * unit,
    0.7 * unit,
    9);
    },
    function() {
      return line(0.1 * unit,
    0.5 * unit,
    0.5 * unit,
    0.5 * unit);
    },
    function() {
      return line(0.5 * unit,
    0.5 * unit,
    0.9 * unit,
    0.5 * unit);
    },
    function() {
      return line(0.5 * unit,
    0.1 * unit,
    0.5 * unit,
    0.5 * unit);
    },
    function() {
      return line(0.5 * unit,
    0.5 * unit,
    0.5 * unit,
    0.9 * unit);
    },
    function() {
      noFill();
      return arc(0.5 * unit,
    0.5 * unit,
    0.8 * unit,
    0.8 * unit,
    0 * HALF_PI,
    1 * HALF_PI);
    },
    function() {
      noFill();
      return arc(0.5 * unit,
    0.5 * unit,
    0.8 * unit,
    0.8 * unit,
    1 * HALF_PI,
    2 * HALF_PI);
    },
    function() {
      noFill();
      return arc(0.5 * unit,
    0.5 * unit,
    0.8 * unit,
    0.8 * unit,
    2 * HALF_PI,
    3 * HALF_PI);
    },
    function() {
      noFill();
      return arc(0.5 * unit,
    0.5 * unit,
    0.8 * unit,
    0.8 * unit,
    3 * HALF_PI,
    4 * HALF_PI);
    }
  ]);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6IlxcIiwic291cmNlcyI6WyJza2V0Y2guY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLFlBQUEsRUFBQSxVQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBOztBQUFBLEtBQUEsR0FBUSxDQUFDLENBQUM7O0FBQ1YsSUFBQSxHQUFPLE9BQU8sQ0FBQzs7QUFDZixPQUFBLEdBQVU7O0FBRVYsS0FBQSxHQUFRLElBQUksSUFBSixDQUFBOztBQUVSLEVBQUEsR0FBSzs7QUFFTCxJQUFBLEdBQU87O0FBQ1AsT0FBQSxHQUFVOztBQUNWLE9BQUEsR0FBVTs7QUFDVixLQUFBLEdBQVE7O0FBRVIsT0FBQSxHQUFVOztBQUNWLEtBQUEsR0FBUTs7QUFFUixRQUFBLEdBQVc7O0FBQ1gsRUFBQSxHQUFLLENBQUM7O0FBQ04sSUFBQSxHQUFPOztBQUVQLFVBQUEsR0FBYSxRQUFBLENBQUEsQ0FBQTtBQUNiLE1BQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtFQUFDLEVBQUEsR0FBSyxDQUFDLEVBQUEsR0FBRyxDQUFKLENBQUEsR0FBUyxRQUFRLENBQUM7RUFDdkIsR0FBQSxHQUFNLENBQUMsQ0FBQyxNQUFGLENBQVMsQ0FBQyxLQUFELEVBQU8sSUFBUCxDQUFUO0VBQ04sQ0FBQSxHQUFJLFFBQVEsQ0FBQyxFQUFELENBQUksQ0FBQyxPQUZsQjtBQUdDLFNBQU0sSUFBTjtJQUNDLE9BQUEsR0FBVyxDQUFDLENBQUMsVUFBRixDQUFhLEtBQUEsQ0FBTSxDQUFBLElBQUssQ0FBWCxDQUFiLEVBQTRCLENBQTVCO0lBRVgsSUFBQSxHQUFPLENBQUMsQ0FBRCxFQUFH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XG5wcmVzc2VkID0gZmFsc2VcclxuXHJcbnN0YXJ0ID0gbmV3IERhdGUoKVxyXG5cclxuYmcgPSAnZ3JlZW4nXHJcblxyXG5hYmNkID0gW11cclxuZmlndXJlcyA9IFtdXHJcbmFuc3dlcnMgPSBbXVxyXG5mYWNpdCA9IDAgXHJcblxyXG5jb3JyZWN0ID0gMFxyXG53cm9uZyA9IDBcclxuXHJcbnByb2JsZW1zID0gW11cclxubnIgPSAtMVxyXG51bml0ID0gMCBcclxuXHJcbm5ld1Byb2JsZW0gPSAtPlxyXG5cdG5yID0gKG5yKzEpICUgcHJvYmxlbXMubGVuZ3RoXHJcblx0b2RkID0gXy5zYW1wbGUgW2ZhbHNlLHRydWVdXHJcblx0biA9IHByb2JsZW1zW25yXS5sZW5ndGggIyA1LDEyIGVsbGVyIDhcclxuXHR3aGlsZSB0cnVlXHJcblx0XHRmaWd1cmVzID0gIF8uc2FtcGxlU2l6ZSByYW5nZSgxIDw8IG4pLCA5XHJcblxyXG5cdFx0YWJjZCA9IFswLDAsMCwwLDAsMCwwLDAsMF1cclxuXHRcdGFiY2RbMF0gPSBmaWd1cmVzWzBdXHJcblx0XHRhYmNkWzFdID0gZmlndXJlc1sxXVxyXG5cdFx0YWJjZFszXSA9IGZpZ3VyZXNbMl1cclxuXHRcdGFiY2RbNF0gPSBmaWd1cmVzWzNdXHJcblxyXG5cdFx0eCA9IGlmIG9kZCB0aGVuIDIgKiogbiAtIDEgZWxzZSAwXHJcblx0XHRlY2hvIHhcclxuXHJcblx0XHRhYmNkWzJdID0gYWJjZFswXSBeIGFiY2RbMV0gXiB4XHJcblx0XHRhYmNkWzVdID0gYWJjZFszXSBeIGFiY2RbNF0gXiB4XHJcblx0XHRhYmNkWzZdID0gYWJjZFswXSBeIGFiY2RbM10gXiB4XHJcblx0XHRhYmNkWzddID0gYWJjZFsxXSBeIGFiY2RbNF0gXiB4XHJcblx0XHRhYmNkWzhdID0gYWJjZFsyXSBeIGFiY2RbNV0gXiB4ICMgdGhlIHNlY3JldCBxdWVzdGlvbm1hcmtcclxuXHJcblx0XHRhbnN3ZXJzID0gW11cclxuXHRcdGFuc3dlcnMucHVzaCBmaWd1cmVzWzRdXHJcblx0XHRhbnN3ZXJzLnB1c2ggZmlndXJlc1s1XVxyXG5cdFx0YW5zd2Vycy5wdXNoIGZpZ3VyZXNbNl1cclxuXHRcdGFuc3dlcnMucHVzaCBmaWd1cmVzWzddXHJcblx0XHRhbnN3ZXJzLnB1c2ggZmlndXJlc1s4XVxyXG5cdFx0YW5zd2Vycy5wdXNoIGFiY2RbOF1cclxuXHJcblx0XHRhbnN3ZXJzID0gXy51bmlxIGFuc3dlcnNcclxuXHRcdGFuc3dlcnMgPSBfLnNodWZmbGUgYW5zd2Vyc1xyXG5cdFx0XHJcblx0XHRmYWNpdCA9IGFuc3dlcnMuaW5kZXhPZiBhYmNkWzhdXHJcblx0XHRpZiBhbnN3ZXJzLmxlbmd0aCA9PSA2IHRoZW4gYnJlYWtcclxuXHJcblx0ZHJhdygpXHJcblxyXG5idXR0b25zID0gW11cclxuXHJcbnNob3cgPSAocGF0dGVybikgLT5cclxuXHRmaWxsICd3aGl0ZSdcclxuXHJcblx0c3Ryb2tlV2VpZ2h0IGlmIG5yPT0yIHRoZW4gNyBlbHNlIDFcclxuXHJcblx0Zm9yIGl4IGluIHJhbmdlIHByb2JsZW1zW25yXS5sZW5ndGhcclxuXHRcdGlmIHBhdHRlcm4gJiAoMSA8PCBpeCkgdGhlbiBwcm9ibGVtc1tucl1baXhdKClcclxuXHJcbndpbmRvdy5zZXR1cCA9IC0+XHJcblx0Y3JlYXRlQ2FudmFzIGlubmVyV2lkdGgtNSxpbm5lckhlaWdodC01XHJcblx0dW5pdCA9IGhlaWdodC82LjVcclxuXHRmb3IgaSBpbiBbMy43KnVuaXQsNC43KnVuaXRdXHJcblx0XHRmb3IgaiBpbiBbMC41KnVuaXQsMS41KnVuaXQsMi41KnVuaXRdXHJcblx0XHRcdGJ1dHRvbnMucHVzaCBbaixpXVxyXG5cdG1ha2VQcm9ibGVtcygpXHJcblx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHR0ZXh0U2l6ZSA0OFxyXG5cdG5ld1Byb2JsZW0oKVxyXG5cclxuZHJhdyA9IC0+XHJcblx0YmFja2dyb3VuZCBiZ1xyXG5cdHN0cm9rZSAnYmxhY2snXHJcblx0eHMgPSBbMC41KnVuaXQsMS41KnVuaXQsMi41KnVuaXQsMy41KnVuaXRdXHJcblx0eXMgPSBbMS41KnVuaXQsMi41KnVuaXQsMy41KnVuaXRdXHJcblx0Zm9yIGkgaW4gcmFuZ2UgNFxyXG5cdFx0bGluZSB4c1swXSx4c1tpXSx4c1szXSx4c1tpXVxyXG5cdFx0bGluZSB4c1tpXSx4c1swXSx4c1tpXSx4c1szXVxyXG5cclxuXHRzdHJva2UgJ3doaXRlJ1xyXG5cdGZvciBpIGluIHJhbmdlIDNcclxuXHRcdGZvciBqIGluIHJhbmdlIDNcclxuXHRcdFx0cHVzaCgpXHJcblx0XHRcdHRyYW5zbGF0ZSAoaSswLjUpKnVuaXQsKGorMC41KSp1bml0XHJcblx0XHRcdGlmIGk9PTIgYW5kIGo9PTJcclxuXHRcdFx0XHRzdHJva2UgJ2JsYWNrJ1xyXG5cdFx0XHRcdHRleHQgJz8nLHVuaXQvMix1bml0LzJcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHNob3cgYWJjZFszKmkral1cclxuXHRcdFx0cG9wKClcclxuXHRcclxuXHRub1N0cm9rZSgpXHJcblx0ZmlsbCAneWVsbG93J1xyXG5cdHRleHQgXCIje2NvcnJlY3R9IG9mICN7Y29ycmVjdCt3cm9uZ31cIiwyKnVuaXQsMC4zKnVuaXRcclxuXHR0ZXh0IHJvdW5kKChuZXcgRGF0ZSgpLXN0YXJ0KS8xMDAwLDEpK1wic1wiLDIqdW5pdCwzLjgqdW5pdFxyXG5cdGZpbGwgJ3doaXRlJ1xyXG5cclxuXHRwdXNoKClcclxuXHR0cmFuc2xhdGUgMCwyLjUqdW5pdFxyXG5cclxuXHRzdHJva2UgJ2JsYWNrJ1xyXG5cdGZvciBpIGluIHJhbmdlIDNcclxuXHRcdGxpbmUgeHNbMF0seXNbaV0seHNbM10seXNbaV1cclxuXHRmb3IgaSBpbiByYW5nZSA0XHJcblx0XHRsaW5lIHhzW2ldLHlzWzBdLHhzW2ldLHlzWzJdXHJcblxyXG5cdHN0cm9rZSAnd2hpdGUnXHJcblx0Zm9yIGkgaW4gcmFuZ2UgM1xyXG5cdFx0Zm9yIGogaW4gcmFuZ2UgMlxyXG5cdFx0XHRwdXNoKClcclxuXHRcdFx0dHJhbnNsYXRlIHhzW2ldLHlzW2pdXHJcblx0XHRcdHNob3cgYW5zd2Vyc1tpKzMqal1cclxuXHRcdFx0cG9wKClcclxuXHRwb3AoKVxyXG5cclxud2luZG93Lm1vdXNlUHJlc3NlZCA9IC0+XHJcblx0aWYgcHJlc3NlZCB0aGVuIHJldHVyblxyXG5cdHByZXNzZWQgPSB0cnVlXHJcblx0Zm9yIGkgaW4gcmFuZ2UgYnV0dG9ucy5sZW5ndGhcclxuXHRcdFt4LHldID0gYnV0dG9uc1tpXVxyXG5cdFx0aWYgeCA8IG1vdXNlWCA8IHgrdW5pdCBhbmQgeSA8IG1vdXNlWSA8IHkrdW5pdFxyXG5cdFx0XHRpZiBmYWNpdCA9PSBpXHJcblx0XHRcdFx0YmcgPSAnZ3JlZW4nXHJcblx0XHRcdFx0Y29ycmVjdCArPSAxXHJcblx0XHRcdGVsc2UgXHJcblx0XHRcdFx0YmcgPSAncmVkJ1xyXG5cdFx0XHRcdHdyb25nICs9IDFcclxuXHRcdFx0bmV3UHJvYmxlbSgpXHJcblxyXG53aW5kb3cubW91c2VSZWxlYXNlZCA9IC0+IHByZXNzZWQgPSBmYWxzZSBcclxuXHJcbm1ha2VQcm9ibGVtcyA9IC0+XHJcblxyXG5cdHBvaW50cyA9IFtdXHJcblx0Zm9yIGkgaW4gWzAuMSp1bml0LDAuNSp1bml0LDAuOSp1bml0XVxyXG5cdFx0Zm9yIGogaW4gWzAuMSp1bml0LDAuNSp1bml0LDAuOSp1bml0XVxyXG5cdFx0XHRwb2ludHMucHVzaCBbaixpXVxyXG5cclxuXHR0cmkgPSAoaSxqLGspIC0+XHJcblx0XHRhID0gcG9pbnRzW2ldXHJcblx0XHRiID0gcG9pbnRzW2pdXHJcblx0XHRjID0gcG9pbnRzW2tdXHJcblx0XHR0cmlhbmdsZSBhWzBdLGFbMV0sYlswXSxiWzFdLGNbMF0sY1sxXVxyXG5cclxuXHRwcm9ibGVtcy5wdXNoIFtcclxuXHRcdC0+IGNpcmNsZSAwLjUqdW5pdCwwLjUqdW5pdCwwLjUqdW5pdFxyXG5cdFx0LT4gY2lyY2xlIDAuMyp1bml0LDAuNyp1bml0LDAuNSp1bml0XHJcblx0XHQtPiBjaXJjbGUgMC43KnVuaXQsMC4zKnVuaXQsMC41KnVuaXRcclxuXHRcdC0+IGNpcmNsZSAwLjMqdW5pdCwwLjMqdW5pdCwwLjUqdW5pdFxyXG5cdFx0LT4gY2lyY2xlIDAuNyp1bml0LDAuNyp1bml0LDAuNSp1bml0XHJcblx0XVxyXG5cclxuXHRwcm9ibGVtcy5wdXNoIFtcclxuXHRcdC0+IHRyaSAwLDMsNFxyXG5cdFx0LT4gdHJpIDAsMSw0XHJcblx0XHQtPiB0cmkgMSwyLDRcclxuXHRcdC0+IHRyaSAyLDQsNVxyXG5cdFx0LT4gdHJpIDQsNSw4XHJcblx0XHQtPiB0cmkgNCw3LDhcclxuXHRcdC0+IHRyaSA0LDYsN1xyXG5cdFx0LT4gdHJpIDMsNCw2XHJcblx0XVxyXG5cclxuXHRwcm9ibGVtcy5wdXNoIFtcclxuXHRcdC0+IGNpcmNsZSAwLjUqdW5pdCwwLjMqdW5pdCw5XHJcblx0XHQtPiBjaXJjbGUgMC4yNSp1bml0LDAuNSp1bml0LDlcclxuXHRcdC0+IGNpcmNsZSAwLjcqdW5pdCwwLjUqdW5pdCw5XHJcblx0XHQtPiBjaXJjbGUgMC41KnVuaXQsMC43KnVuaXQsOVxyXG5cclxuXHRcdC0+IGxpbmUgMC4xKnVuaXQsMC41KnVuaXQsMC41KnVuaXQsMC41KnVuaXRcclxuXHRcdC0+IGxpbmUgMC41KnVuaXQsMC41KnVuaXQsMC45KnVuaXQsMC41KnVuaXRcclxuXHRcdC0+IGxpbmUgMC41KnVuaXQsMC4xKnVuaXQsMC41KnVuaXQsMC41KnVuaXRcclxuXHRcdC0+IGxpbmUgMC41KnVuaXQsMC41KnVuaXQsMC41KnVuaXQsMC45KnVuaXRcclxuXHJcblx0XHQtPiBub0ZpbGwoKTsgYXJjIDAuNSp1bml0LCAwLjUqdW5pdCwgMC44KnVuaXQsIDAuOCp1bml0LCAwICogSEFMRl9QSSwgMSAqIEhBTEZfUElcclxuXHRcdC0+IG5vRmlsbCgpOyBhcmMgMC41KnVuaXQsIDAuNSp1bml0LCAwLjgqdW5pdCwgMC44KnVuaXQsIDEgKiBIQUxGX1BJLCAyICogSEFMRl9QSVxyXG5cdFx0LT4gbm9GaWxsKCk7IGFyYyAwLjUqdW5pdCwgMC41KnVuaXQsIDAuOCp1bml0LCAwLjgqdW5pdCwgMiAqIEhBTEZfUEksIDMgKiBIQUxGX1BJXHJcblx0XHQtPiBub0ZpbGwoKTsgYXJjIDAuNSp1bml0LCAwLjUqdW5pdCwgMC44KnVuaXQsIDAuOCp1bml0LCAzICogSEFMRl9QSSwgNCAqIEhBTEZfUElcclxuXHRdXHJcblxyXG5cclxuXHJcbiJdfQ==
//# sourceURL=c:\github\2024\036-IQ-generator\sketch.coffee