// Generated by CoffeeScript 2.7.0
var abcd, answers, bg, buttons, corners, echo, facit, figures, newProblem, points, range, show, tri;

range = _.range;

echo = console.log;

bg = 'green';

abcd = [];

figures = [];

answers = [];

facit = 0;

points = [];

points.push([10, 10]);

points.push([50, 10]);

points.push([90, 10]);

points.push([10, 50]);

points.push([50, 50]);

points.push([90, 50]);

points.push([10, 90]);

points.push([50, 90]);

points.push([90, 90]);

corners = [];

corners.push([0, 3, 4]);

corners.push([0, 1, 4]);

corners.push([1, 2, 4]);

corners.push([2, 4, 5]);

corners.push([4, 5, 8]);

corners.push([4, 7, 8]);

corners.push([4, 6, 7]);

corners.push([3, 4, 6]);

newProblem = function() {
  var i, l, len, ref;
  figures = [];
  ref = range(9);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    figures.push(_.sample(range(255)));
  }
  abcd = [0, 0, 0, 0, 0, 0, 0, 0, 0];
  abcd[0] = figures[0];
  abcd[1] = figures[1];
  abcd[3] = figures[2];
  abcd[4] = figures[3];
  abcd[2] = abcd[0] ^ abcd[1];
  abcd[5] = abcd[3] ^ abcd[4];
  abcd[6] = abcd[0] ^ abcd[3];
  abcd[7] = abcd[1] ^ abcd[4];
  abcd[8] = abcd[2] ^ abcd[5];
  answers = [];
  answers.push(figures[4]);
  answers.push(figures[5]);
  answers.push(figures[6]);
  answers.push(figures[7]);
  answers.push(figures[8]);
  answers.push(abcd[8]);
  answers = _.shuffle(answers);
  facit = answers.indexOf(abcd[8]);
  return echo(facit);
};

buttons = [];

buttons.push([50, 400]);

buttons.push([150, 400]);

buttons.push([250, 400]);

buttons.push([50, 500]);

buttons.push([150, 500]);

buttons.push([250, 500]);

window.setup = function() {
  createCanvas(400, 650);
  textAlign(CENTER, CENTER);
  textSize(48);
  return newProblem();
};

tri = function(i, j, k) {
  return triangle(points[i][0], points[i][1], points[j][0], points[j][1], points[k][0], points[k][1]);
};

show = function(pattern) {
  var bit, corner, ix, l, len, ref, results;
  ref = range(8);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    ix = ref[l];
    corner = corners[ix];
    bit = 1 << ix;
    if (pattern & bit) {
      results.push(tri(corner[0], corner[1], corner[2]));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

window.draw = function() {
  var i, j, l, len, len1, len2, len3, len4, len5, m, n, o, p, q, ref, ref1, ref2, ref3, ref4, ref5, results;
  background(bg);
  stroke('black');
  ref = range(4);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    line(50, 50 + i * 100, 350, 50 + i * 100);
    line(50 + i * 100, 350, 50 + i * 100, 50);
  }
  stroke('white');
  ref1 = range(3);
  for (m = 0, len1 = ref1.length; m < len1; m++) {
    i = ref1[m];
    ref2 = range(3);
    for (n = 0, len2 = ref2.length; n < len2; n++) {
      j = ref2[n];
      push();
      translate(50 + i * 100, 50 + j * 100);
      if (i === 2 && j === 2) {
        stroke('black');
        text('?', 50, 50);
      } else {
        show(abcd[3 * i + j]);
      }
      pop();
    }
  }
  translate(0, 350);
  stroke('black');
  ref3 = range(3);
  for (o = 0, len3 = ref3.length; o < len3; o++) {
    i = ref3[o];
    line(50, 50 + i * 100, 350, 50 + i * 100);
  }
  ref4 = range(4);
  for (p = 0, len4 = ref4.length; p < len4; p++) {
    i = ref4[p];
    line(50 + i * 100, 250, 50 + i * 100, 50);
  }
  stroke('white');
  ref5 = range(3);
  results = [];
  for (q = 0, len5 = ref5.length; q < len5; q++) {
    i = ref5[q];
    results.push((function() {
      var len6, r, ref6, results1;
      ref6 = range(2);
      results1 = [];
      for (r = 0, len6 = ref6.length; r < len6; r++) {
        j = ref6[r];
        push();
        translate(50 + i * 100, 50 + j * 100);
        show(answers[i + 3 * j]);
        results1.push(pop());
      }
      return results1;
    })());
  }
  return results;
};

window.mousePressed = function() {
  var i, l, len, ref, results, x, y;
  ref = range(6);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    [x, y] = buttons[i];
    if ((x < mouseX && mouseX < x + 100) && (y < mouseY && mouseY < y + 100)) {
      bg = facit === i ? 'green' : 'red';
      results.push(newProblem());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2024\036-IQ-generator\coffee\sketch.coffee